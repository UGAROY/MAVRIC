<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:mate="http://mate.asfusion.com/" xmlns:addOns="MAVRIC2.views.addOns.*"
			   close="handleCloseEvent();"
			   creationComplete="init();"
			   title="Saved Routes"
			   width="400" height="490"
			   skinClass="skins.MavricTitleWindowSkin">
	<s:layout>
		<s:VerticalLayout verticalAlign="top" horizontalAlign="center"/>
	</s:layout>
	
	<fx:Declarations>
		<fx:Array id="RtSelectorValidators">
			<!--
			<mx:NumberValidator id="BegMileInpValidator" source="{txtBegin}" property="text" domain="real"
								minValue="{String(RouteList.dataProvider.getItemAt(_currentIndex).beginmile)}" maxValue="{String(RouteList.dataProvider.getItemAt(_currentIndex).endmile)}" 
								trigger="{txtBegin}" triggerEvent="change"/>
			<mx:NumberValidator id="EndMileInpValidator" source="{txtEnd}" property="text" domain="real"
								minValue="{String(RouteList.dataProvider.getItemAt(_currentIndex).beginmile)}" maxValue="{String(RouteList.dataProvider.getItemAt(_currentIndex).endmile)}" 
								trigger="{txtEnd}" triggerEvent="change"/>
			-->
			<mx:NumberValidator id="BegMileInpValidator" source="{txtBegin}" property="text" domain="real"
								minValue="{String(dp.getItemAt(_currentIndex).beginmile)}" maxValue="{String(dp.getItemAt(_currentIndex).endmile)}" 
								trigger="{txtBegin}" triggerEvent="change"/>
			<mx:NumberValidator id="EndMileInpValidator" source="{txtEnd}" property="text" domain="real"
								minValue="{String(dp.getItemAt(_currentIndex).beginmile)}" maxValue="{String(dp.getItemAt(_currentIndex).endmile)}" 
								trigger="{txtEnd}" triggerEvent="change"/>
			<mx:Validator id="reqBMileItem" required="true" source="{txtBegin}"
						  property="text" />
			<mx:Validator id="reqEMileItem" required="true" source="{txtEnd}"
						  property="text" />
			
			<!--<mx:NumberValidator id="reqScaleItem" source="{ScaleList}"
			property="selectedIndex"
			minValue="0"/>-->
			<!--<Validators:ComboBoxValidator id="comboBoxValidator" error="Please Select a Route" property="selectedItem"/>--> <!-- This does not specify a source and causes an error in FormValidator-->
		</fx:Array>

	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import com.asfusion.mate.core.Cache;
		import com.asfusion.mate.events.Dispatcher;
		import com.transcendss.mavric.db.CachedElement;
		import com.transcendss.mavric.db.CachedRoute;
		import com.transcendss.mavric.db.MAVRICDBManager;
		import com.transcendss.mavric.events.LocalRouteEvent;
		import com.transcendss.mavric.util.TSSRectangle;
		
		import mx.collections.ArrayCollection;
		import mx.core.FlexGlobals;
		import mx.managers.PopUpManager;
		import mx.utils.ObjectUtil;
		
		import spark.events.GridSelectionEvent;
		[Bindable]
		public var dp:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		private var _endTxt:String;
		
		[Bindable]
		private var _beginTxt:String;
		
		private var _thresh:Number;
		
		private var _latentDP:ArrayCollection = null;
		
		[Bindable]
		private var _currentIndex:int = 0;
		
		private var _dispatcher:Dispatcher = new Dispatcher();
		
		[Bindable]
		private var editable:Boolean = false;
	
		private function init():void
		{
			var dbManager:MAVRICDBManager = MAVRICDBManager.newInstance();
			var dp:ArrayCollection = new ArrayCollection(dbManager.getCachedRoutes());
			RouteList.dataProvider = dp;
			/*var testCoord:Point = new Point(FlexGlobals.topLevelApplication.longitude, FlexGlobals.topLevelApplication.latitude);
			var parsedBoxes:ArrayCollection = new ArrayCollection();
			_thresh = ConfigUtility.getNumber("route_tolerance");
			
			for each (var lCRoute:CachedRoute in dp)
			{
				var min:Number = Number.MAX_VALUE;
				var rect:TSSRectangle = TSSRectangle.fromJSON(lCRoute.bbox);
				if (rect.hasPoint(testCoord))
				{
					var data:Array = JSON.parse(lCRoute.path) as Array;
					for each (var lCoord:Object in data)
					{
						var dist:Number = Math.sqrt(Math.pow(parseFloat(lCoord.X) - testCoord.x, 2) + Math.pow(parseFloat(lCoord.Y) - testCoord.y, 2));
						
						if (dist < min)
							min = dist;
						
						if (dist < _thresh)
						{
							parsedBoxes.addItem(rect);
							break;
						}
					}
						
				}
				
			}*/
			if (_latentDP != null) {
				dp = _latentDP;
				RouteList.dataProvider = _latentDP;
			}
			var vec:Vector.<int> = new Vector.<int>();
			vec.push(0);
			RouteList.sortByColumns(vec, true);
		}		
		
		public function setDp(arr:ArrayCollection):void
		{
			if (RouteList.dataProvider != null)
				RouteList.dataProvider.removeAll();
			dp = arr;
			RouteList.dataProvider = arr;
		}
		
		private function handleCloseEvent():void 
		{
			PopUpManager.removePopUp(this);
		}
		
		override protected function closeButton_clickHandler(event:MouseEvent):void
		{
			handleCloseEvent();
			//dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
		
		private function loadBtn_clickHandler(event:Event):void
		{
			FlexGlobals.topLevelApplication.setBusyStatus(true);
			//Alert.show(RouteList.selectedIndex.toString());
			if (BegMileInpValidator.validate().type == "invalid" || EndMileInpValidator.validate().type == "invalid")
			{
				FlexGlobals.topLevelApplication.TSSAlert("Invalid mile input.");
				FlexGlobals.topLevelApplication.setBusyStatus(false);
				return;
			}
			if(new Number(txtBegin.text) > new Number(txtEnd.text))
			{
				FlexGlobals.topLevelApplication.TSSAlert("Beginning milepost must be less than the ending milepost.", this);
				FlexGlobals.topLevelApplication.setBusyStatus(false);
				return;
			}
			FlexGlobals.topLevelApplication.keepRunning = false;
			
			
			if(RouteList.selectedIndex > -1)
			{
				var selRowObj:Object = RouteList.selectedItem;
				//Alert.show(selRowObj.id);
				FlexGlobals.topLevelApplication.isCachedRoute = true;
				//FlexGlobals.topLevelApplication.sldDiagram.loadLocalDiagram(selRowObj.id, parseInt(txtBegin.text), parseInt(txtEnd.text));
				var routeLd:LocalRouteEvent = new LocalRouteEvent(LocalRouteEvent.LOAD_ROUTE, true);
				routeLd.routePkId = selRowObj.id;
				routeLd.begin = Number(txtBegin.text);
				routeLd.end = Number(txtEnd.text);
				
				_dispatcher.dispatchEvent(routeLd);
				// close this form
				PopUpManager.removePopUp(this);
			}
			else
				FlexGlobals.topLevelApplication.setBusyStatus(false);
			

		}
		
		private function mapIt(route:CachedRoute):int
		{
			if (route.routeid.substr(0, 2) == "I ")
				return 3;
			else if (route.routeid.substr(0, 2) == "US")
				return 2;
			else if (route.routeid.substr(0, 2) == "IA")
				return 1;
			else 
				return 1;
		}
		
		private function routeCompareFunction(routeA:Object, routeB:Object, col:GridColumn):int
		{
			trace("Comparing "+ routeA.routeid + " and " + routeB.routeid);
			if (routeA.routeid.substr(0, 2) != routeB.routeid.substr(0, 2))
			{
				var mapA:int =mapIt(routeB as CachedRoute) ;
				var mapB:int=	mapIt(routeA as CachedRoute);
				if(mapA<mapB)
					return -1;
				else if(mapA>mapB)
					return 1;
			}
			var routeNumAStr:String = String(routeA.routeid).replace(new RegExp(/[^\d]/g),"");
			var routeNumBStr:String =String(routeB.routeid).replace(new RegExp(/[^\d]/g),"");
			return ObjectUtil.numericCompare(Number(routeNumAStr), Number(routeNumBStr))
		}
		
		protected function onSelect(event:GridSelectionEvent):void
		{
			//trace("rowIndex: " + event.selectionChange.rowIndex);
			var rowIndex:int = event.selectionChange.rowIndex;
			_currentIndex = rowIndex;
			_endTxt = RouteList.dataProvider[rowIndex].endmile;
			_beginTxt = RouteList.dataProvider[rowIndex].beginmile;
			editable = true;
		}

		public function get latentDP():ArrayCollection
		{
			return _latentDP;
		}

		public function set latentDP(value:ArrayCollection):void
		{
			_latentDP = value;
		}
		
		protected function txt_focusInHandler(event:FocusEvent):void
		{
			txtBegin.softKeyboardType = SoftKeyboardType.NUMBER;
			txtEnd.softKeyboardType = SoftKeyboardType.NUMBER;
		}
		
	]]>
	</fx:Script>
	
	<s:VGroup gap="10" width="100%" height="100%" horizontalAlign="center" verticalAlign="top">
		<s:Spacer height="10"/>
		<s:Label text="Select Route to load from local storage." />
		<s:Scroller horizontalScrollPolicy="off" verticalScrollPolicy="auto" width="100%" height="100%" hasFocusableChildren="true">
			<s:HGroup width="100%" clipAndEnableScrolling="true" horizontalAlign="center" >
				<s:DataGrid id="RouteList" height="100%" width="95%" dataProvider="{dp}" editable="false" selectionChange="onSelect(event)" selectionMode="singleRow">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn sortCompareFunction="routeCompareFunction" headerText="Route" dataField="routeid"/>
							<s:GridColumn headerText="Begin" dataField="beginmile"/>
							<s:GridColumn headerText="End" dataField="endmile" />
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:HGroup>

		</s:Scroller>
		
		<s:Form id ="endpointForm" width="100%">
			<s:FormItem label="Begin Milepost:" width="100%" backgroundColor="0xFFFFFF">
				<s:HGroup horizontalAlign="center" verticalAlign="middle">
					<s:TextInput id="txtBegin"  text="{_beginTxt}" enabled="{editable}" softKeyboardType="number" width="150" focusIn="txt_focusInHandler(event)"/>
					<s:Label id="lblBeginMin" color="#6a6a6a"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="End Milepost:" width="100%" backgroundColor="0xFFFFFF">
				<s:HGroup horizontalAlign="center" verticalAlign="middle">
					<s:TextInput id="txtEnd" width="150" text="{_endTxt}" enabled="{editable}" softKeyboardType="number" focusIn="txt_focusInHandler(event)"/>
					<s:Label id ="lblEndMax" color="#6a6a6a"/>
				</s:HGroup>
			</s:FormItem>	
		</s:Form>
		
		<!--<s:HGroup>
			<s:Label id="lblBegin" text="Begin Mile" />
			<s:TextInput id="txtBegin" text="" />
		</s:HGroup>
		
		<s:HGroup>
			<s:Label id="lblEnd" text="End Mile" />
			<s:TextInput id="txtEnd" text="" />
		</s:HGroup>-->
		
		<s:Button label="Load" height="32" fontSize="14" click="loadBtn_clickHandler(event)" />
		<s:Spacer height="10"/>
	</s:VGroup>
</s:TitleWindow>
