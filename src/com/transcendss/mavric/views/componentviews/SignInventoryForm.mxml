<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:components="spark.components.*"
			   xmlns:views="com.transcendss.mavric.views.*"
			   width="1072" height="689"  
			   skinClass="skins.MavricTitleWindowSkin"
			   creationComplete="init()"
			   title="Sign Inventory"
			   close="handleCloseEvent(event)">
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.events.AssetEvent;
			import com.transcendss.mavric.managers.ImageManager;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			
			import flash.events.MouseEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.PopUpEvent;
			
			private var categories:ArrayCollection;
			private var signs:ArrayCollection;
			private var sizes:ArrayCollection;
			private var signConditions:ArrayCollection;
			private var postConditions:ArrayCollection;
			private var mountingTypes:ArrayCollection;
			private var retroreflectivities:ArrayCollection;
			
			private var imageManager:ImageManager = new ImageManager();
			private var editingSign:BaseAsset = null;
			
			public function init():void
			{
				//imageManager.setupTable();
				categories = imageManager.getCats();
				signs = imageManager.getMUTCDs();
				var culvE:AssetEvent = new AssetEvent(AssetEvent.CULVERTFORMLOADED);
				dispatchEvent(culvE);
			}
			
			override protected function closeButton_clickHandler(event:MouseEvent):void
			{
				var eve:PopUpEvent = new PopUpEvent(PopUpEvent.CLOSE);
				handleCloseEvent(null);
				//dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function handleCloseEvent(event:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
				MUTCDPopUp.close(false);
				if (editingSign)
					editingSign.symbol.deselectAsset();
			}
			
			private function displayCat(event:MouseEvent):void
			{
				catPopUp.open(this,false);
				PopUpManager.centerPopUp(catPopUp);
				catList.dataProvider = categories;
			}
			
			private function displayMUTCD(event:MouseEvent):void
			{
				MUTCDPopUp.open(this,false);
				PopUpManager.centerPopUp(MUTCDPopUp);
				MUTCDList.dataProvider = catInput.text.length == 0 ? signs : imageManager.getMUTCDByCatString(catInput.text);
			}
			
			private function displaySize(event:MouseEvent):void
			{
				sizePopUp.open(this,false);
				PopUpManager.centerPopUp(sizePopUp);
				sizes = new ArrayCollection();
				sizes.addItem("12 X 12");
				sizes.addItem("12 X 18");
				sizes.addItem("18 X 18");
				sizes.addItem("18 X 24");
				sizes.addItem("24 X 24");
				sizes.addItem("24 X 30");
				sizes.addItem("30 X 30");
				sizes.addItem("36 X 36");
				sizeList.dataProvider = sizes;
			}
			
			private function displaySignCondition(event:MouseEvent):void
			{
				scPopUp.open(this,false);
				PopUpManager.centerPopUp(scPopUp);
				signConditions = new ArrayCollection();
				signConditions.addItem("Poor");
				signConditions.addItem("Fair");
				signConditions.addItem("Good");
				scList.dataProvider = signConditions;
			}
			
			private function displayPostCondition(event:MouseEvent):void
			{
				pcPopUp.open(this,false);
				PopUpManager.centerPopUp(pcPopUp);
				postConditions = new ArrayCollection();
				postConditions.addItem("Poor");
				postConditions.addItem("Fair");
				postConditions.addItem("Good");
				pcList.dataProvider = postConditions;
			}
			
			private function displayMountingType(event:MouseEvent):void
			{
				mtPopUp.open(this,false);
				PopUpManager.centerPopUp(mtPopUp);
				mountingTypes = new ArrayCollection();
				mountingTypes.addItem("Independent");
				mountingTypes.addItem("Guide Sign");
				mtList.dataProvider = mountingTypes;
			}
			
			private function displayRetroreflectivity(event:MouseEvent):void
			{
				rPopUp.open(this,false);
				PopUpManager.centerPopUp(rPopUp);
				retroreflectivities = new ArrayCollection();
				retroreflectivities.addItem("0");
				retroreflectivities.addItem("1");
				retroreflectivities.addItem("2");
				rList.dataProvider = retroreflectivities;
			}
			
			private function closeCatPop():void
			{
				catPopUp.close(true, catList.selectedItem);
				catInput.text = catList.selectedItem;
			}
			
			private function onSave():void
			{
				var event:AssetEvent = new AssetEvent(AssetEvent.NEWCULVERT);
				var sign:BaseAsset;
				
				if (editingSign)
				{
					sign = editingSign;
				}
				else
				{
					sign = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.createAsset("SIGN", -1, mutcdInput.text);
				}
				
				sign.invProperties[sign.routeIDColName].value = new String(FlexGlobals.topLevelApplication.GlobalComponents.stkDiagram.route.routeName);
				sign.invProperties["MUTCD"].value = mutcdInput.text;
				sign.invProperties[sign.fromMeasureColName].value = new String(FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP());
				
				event.culvert = sign;
				event.routeFullName = new String(FlexGlobals.topLevelApplication.GlobalComponents.stkDiagram.route.routeFullName);
				dispatchEvent(event);
				handleCloseEvent(null);
			}
			
			public function loadSign(sign:BaseAsset):void
			{
				var mutcd:String = sign.invProperties["MUTCD"].value;
				
				//This function is getting called when it shouldn't (when we are just opening the form) so the following line aborts if this is the case.
				if (mutcd == null)
					return;
				
				editingSign = sign;
				catInput.text = imageManager.getCatStringByMUTCD(mutcd);
				mutcdInput.text = mutcd;
				displaySign();
			}
			
			private function closeMUTCDPop():void
			{
				//culData.ctype=MUTCDList.selectedItem.DESCRIPTION;
				MUTCDPopUp.close(true, MUTCDList.selectedItem);
				mutcdInput.text = MUTCDList.selectedItem;
				displaySign();
			}
			
			private function displaySign():void
			{
				var image:Bitmap = imageManager.getById(mutcdInput.text);
				var sprite:Sprite = new Sprite();
				
				sprite.addChild(image);
				
				//if image height is too big and is greater than width or vice-versa, then
				//resize it, keeping the same aspect ratio... 200 pixels here was just arbitrarily
				//chosen and is the upper bound of the height/width of an image
				if(sprite.height > 200 && sprite.height > sprite.width){
					sprite.height = 200;
					sprite.scaleX = sprite.scaleY;
				}
				else if(sprite.width > 200){
					sprite.width = 200;
					sprite.scaleY = sprite.scaleX;
				}  
				
				signDisplay.removeChildren();
				signDisplay.addChild(sprite);
			}
			
			private function closeSizePop():void
			{
				sizePopUp.close(true, sizeList.selectedItem);
				sizeInput.text = sizeList.selectedItem;
			}
			
			private function closeSignConditionPop():void
			{
				scPopUp.close(true, scList.selectedItem);
				scInput.text = scList.selectedItem;
			}
			
			private function closePostConditionPop():void
			{
				pcPopUp.close(true, pcList.selectedItem);
				pcInput.text = pcList.selectedItem;
			}
			
			private function closeMountingTypePop():void
			{
				mtPopUp.close(true, mtList.selectedItem);
				mtInput.text = mtList.selectedItem;
			}
			
			private function closeRetroreflectivityPop():void
			{
				rPopUp.close(true, rList.selectedItem);
				rInput.text = rList.selectedItem;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:SkinnablePopUpContainer id="catPopUp" width="300" height="400"  name="Category"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="catList" change="closeCatPop()" width="100%" height="100%" labelField="Category" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		<s:SkinnablePopUpContainer id="MUTCDPopUp" width="300" height="400"  name="MUTCD"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="MUTCDList" change="closeMUTCDPop()" width="100%" height="100%" labelField="MUTCD" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		
		<s:SkinnablePopUpContainer id="sizePopUp" width="300" height="400"  name="Size"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="sizeList" change="closeSizePop()" width="100%" height="100%" labelField="size" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		<s:SkinnablePopUpContainer id="pcPopUp" width="300" height="400"  name="Post Condition"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="pcList" change="closePostConditionPop()" width="100%" height="100%" labelField="pc" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		<s:SkinnablePopUpContainer id="scPopUp" width="300" height="400"  name="Sign Condition"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="scList" change="closeSignConditionPop()" width="100%" height="100%" labelField="sc" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		<s:SkinnablePopUpContainer id="mtPopUp" width="300" height="400"  name="Mounting Type"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="mtList" change="closeMountingTypePop()" width="100%" height="100%" labelField="mt" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		<s:SkinnablePopUpContainer id="rPopUp" width="300" height="400"  name="Retroreflectivity"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="rList" change="closeRetroreflectivityPop()" width="100%" height="100%" labelField="r" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>
	
	<s:HGroup width="100%">
		<s:VGroup width="40%">
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Category" click="displayCat(event)"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="catInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="MUTCD" click="displayMUTCD(event)"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="mutcdInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Size" click="displaySize(event)" />
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="sizeInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup verticalAlign="middle">
				<s:Label id="legend" text="Legend:" fontWeight="bold"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="legendInput" fontWeight="bold" editable="true"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup verticalAlign="middle">
				<s:Label id="location" text="Location:" fontWeight="bold"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="locationInput" fontWeight="bold" editable="true"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup verticalAlign="middle">
				<s:Label id="installationDate" text="Installation Date:" fontWeight="bold"/>
				<s:Spacer/>
				<s:TextInput id="installationDateInput" fontWeight="bold" editable="true"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Sign Condition" click="displaySignCondition(event)"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="scInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Post Condition" click="displayPostCondition(event)"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="pcInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Mounting Type" click="displayMountingType(event)"/>
				<s:Spacer/>
				<s:Spacer/>
				<s:TextInput id="mtInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Retroreflectivity" click="displayRetroreflectivity(event)"/>
				<s:TextInput id="rInput" fontWeight="bold" editable="false"/>
			</s:HGroup>
			
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			<s:Spacer/>
			
			<s:HGroup width="100%">
				<s:Button id="save" label="Save" click="onSave()"/>
				<s:Spacer/>
				<s:Button id="cancel" label="Cancel" click="handleCloseEvent(null)"/>
			</s:HGroup>
			
		</s:VGroup>
			<s:SpriteVisualElement id="signDisplay"></s:SpriteVisualElement>
	</s:HGroup>
	
	
	
</s:TitleWindow>
