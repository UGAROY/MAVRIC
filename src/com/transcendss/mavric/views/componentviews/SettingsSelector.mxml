<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:Validators="Validators.*"
			   title="Settings"	 
			   close="handleCloseEvent();" 
			   contentCreationComplete="init()" 
			   skinClass="skins.MavricTitleWindowSkin" xmlns:local="*" xmlns:views="com.transcendss.mavric.views.*">
	<s:layout>
		<s:HorizontalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>	
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.managers.ConfigurationManager;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
//			import mx.containers.Accordion;
			
			import mx.core.*;
			import mx.managers.PopUpManager;
			
			import spark.components.Group;
			import spark.layouts.TileLayout;
			
			private var fileReference:FileReference = new FileReference();
			private var configManager:ConfigurationManager;
			
			protected function init():void
			{
				configManager = FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager;
				viewStack.width=parent.width/3;
				viewStack.height=parent.height/2;
				fileReference.addEventListener(Event.SELECT,onFileSelect);
				fileReference.addEventListener(Event.COMPLETE,onFileComplete);
			}
			
			//populate the diagram tab with values in the config manager (obtained from settings files)
			private function contentPopulate():void
			{
				
				if (configManager != null)
				{
//					pkrRoadColor.selectedColor = configManager.roadColor;
//					pkrStripeColor.selectedColor = configManager.stripeColor;
					ScaleInp.text = String(configManager.defaultScale);
				//	attrViewCheck.selected = configManager.AttributeTableView;
					guideBarOnCheck.selected = configManager.guideBarSwitch;
					//invformOnCheck.selected = configManager.invPanelContent;
					//signViewCheck.selected = configManager.milepostSwitch;
				}
				addElementColorPickers();
			}
			
			
			//populate element settings tab with color pickers for all elements specified in the settings file
			private function addElementColorPickers():void{
//				var ElemAccordion:Accordion = new Accordion();
				var elemSettingsArray:ArrayCollection = new ArrayCollection(configManager.dataElementDetails);
				var navContent:NavigatorContent = new NavigatorContent();
				var labeltxt:String;
				var sortfield1:SortField = new SortField("ID");
				var sortfield2:SortField = new SortField("Value");
				var sort:Sort = new Sort();
				
				sort.fields = [sortfield1, sortfield2];
				elemSettingsArray.sort =  sort;
				elemSettingsArray.refresh();
				
//				ElemAccordion.percentWidth = 100;
//				ElemAccordion.percentHeight = 100;
				//loop through the element details array extracted from settings file by configmanager
				for (var i:int=0; i<elemSettingsArray.length;i++)
				{
					//if first element or different element, create new nav content
				  if(i==0 || elemSettingsArray[i].ID != elemSettingsArray[i-1].ID || i==elemSettingsArray.length-1)
				  {
					 //if the different element add the previous navigcontent to accordian 
					if (i!=0)
					{
//						ElemAccordion.addElement(navContent);						
					}
					navContent= getNewNavContent(elemSettingsArray[i].ID);
				  }
				  //obtain the element value or range, i.e. label for color picker
				  if (String(elemSettingsArray[i].Value).length>0)
					  labeltxt =elemSettingsArray[i].Value;
				  else
					  labeltxt =   elemSettingsArray[i].Range;
				  //add labels and color pickers for the current element nav content
				  navContent.addElement(fillNavContent(labeltxt,elemSettingsArray[i].UniqueID,elemSettingsArray[i].Color));
				}
//				elemStngs.addElement(ElemAccordion);
			}
			
			//creates a label and a color picker, sets the id for colorpicker and adds both to hgroup
			private function fillNavContent(lblText:String,uniqueID:String,seletedColor:uint):HGroup
			{
				var label:spark.components.Label ;
//				var clrPckr:ColorPicker;
				var vgroup:VGroup;
				var hgroup:HGroup;
				
				label  = new spark.components.Label();
				label.text = lblText;
				
//				clrPckr = new ColorPicker();
//				clrPckr.id = uniqueID;
//				clrPckr.selectedColor = seletedColor;
				vgroup = new VGroup();
				vgroup.addElement(label);
//				vgroup.addElement(clrPckr);
				hgroup = new HGroup();
				hgroup.paddingBottom = 10;
				hgroup.paddingLeft =10;
				hgroup.paddingRight =10;
				hgroup.paddingTop =10;
				hgroup.addElement(vgroup);
				return hgroup;
			}
			//create a new nav content with element type id and label set
			private function getNewNavContent(ID:int):NavigatorContent{
				var navContent:NavigatorContent = new NavigatorContent();
				navContent.percentHeight = 100;
				navContent.percentWidth = 100;
				navContent.id = "EID"+ID;
				navContent.label = getNavLabel(ID);
				navContent.layout = new TileLayout();
				return navContent;
			}
			//returns the label for each id
			private function getNavLabel(id:int):String{
				switch(id)
				{
					case 1:
						return "Speed Limit Element Settings";
						break;
					case 2:
						return "Functional Class Element Settings";
						break;
					case 3:
						return "AADT Element Settings";
						break;
					case 4:
						return "IRI Element Settings";
						break;
					case 5:
						return "Median Type Element Settings";
						break;
					case 6:
						return "Median Width Element Settings";
						break;
					case 7:
						return "Shoulder Type Element Settings";
						break;
					case 8:
						return "Shoulder Width Element Settings";
						break;
					default:
						return "Element Settings";
						break;
				}
			}
			private function onSave():void
			{
//				FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.roadColor =  pkrRoadColor.selectedColor ;
//				FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.stripeColor = pkrStripeColor.selectedColor;
			//	FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.AttributeTableView = attrViewCheck.selected;
				FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.guideBarSwitch = guideBarOnCheck.selected;
				FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.invPanelContent = invformOnCheck.selected;
				FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.milepostSwitch = signViewCheck.selected;
			}			
			
			private function onFileSave():void
			{
				
			}
			
			private function onFileLoad():void
			{
				
			}			
			
			private function onFileSelect(event:Event):void
			{
				
			}
			private function onFileComplete(event:Event):void
			{
				//TODO: set the config manger with the data in the settings file
				//				RdwyWidthInp.text = fileReference.data.readUTFBytes(fileReference.data.length);
			}
			
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- validators array -->
		<fx:Array id="validators">
			<mx:Validator id="reqScaleItem" required="true" source="{ScaleInp}"
						  property="text" />
		</fx:Array>
		<!--validator with the above array as parameters. On change for each item, validates using the array-->
		<Validators:FormValidator id="formValidator" validators="{this.validators}"/>
	</fx:Declarations>
	<s:VGroup gap="0">
		
		<s:TabBar id="tabs" left="8" y="2" dataProvider="{viewStack}"/>
		<s:BorderContainer id="printRangeBorder" cornerRadius="3" borderWeight="1" 
						   borderColor="0x444444" dropShadowVisible="true" backgroundColor="0xffffcc">	
			
		<views:CBViewStack id="viewStack" skinClass="skins.CBScrollableSkin" color="0x323232" selectedIndex="1" width="488" height="206" creationPolicy="all" creationComplete="contentPopulate()">	
				<s:NavigatorContent label="Application"  >
					<s:layout>
						<s:HorizontalLayout gap="10" verticalAlign="top"/>
					</s:layout>
					<s:Form id ="ApplStngsSelForm" >
						<s:VGroup>
							<s:FormItem label="Attribute Table View:">
								<s:CheckBox id="attrViewCheck"/>
							</s:FormItem>
							<s:FormItem label="Guide Bar On:">
								<s:CheckBox id="guideBarOnCheck" />
							</s:FormItem>
							<s:FormItem label="Inventory Form On:">
								<s:CheckBox id="invformOnCheck" />
							</s:FormItem>
							<s:FormItem label="Sign View On:">
								<s:CheckBox id="signViewCheck" />
							</s:FormItem>
						</s:VGroup>
					</s:Form>	
				</s:NavigatorContent>
				
				<s:NavigatorContent label="Diagram" width="100%" height="100%"  >
					<s:layout>
						<s:HorizontalLayout gap="10" verticalAlign="top"/>
					</s:layout>
					<s:Form id ="StngsSelForm">
						<s:HGroup>
							<s:FormItem label="Roadway Color:">
		<!--						<mx:ColorPicker id="pkrRoadColor" selectedColor="#CCCCCC" /> -->
							</s:FormItem>														
						</s:HGroup>
						<s:HGroup>
							<s:FormItem label="Stripe Color:" width="110">
	<!--							<mx:ColorPicker id="pkrStripeColor" selectedColor="#CCCCCC" paddingLeft="20" width="20"/> -->
							</s:FormItem>		
						</s:HGroup>
						<s:VGroup gap="0">
							<s:FormItem label="Default Scale:	1:">
								<s:HGroup verticalAlign="middle">
									<s:TextInput  id="ScaleInp" text="1000" change="this.formValidator.validateForm(event);"/>
									<s:Label text=" px"/>
								</s:HGroup>						
							</s:FormItem>
							<s:Label text="(in pixels)"/>
						</s:VGroup>
					</s:Form>			
				</s:NavigatorContent>
				
				<s:NavigatorContent label="Feature Elements" width="100%" height="100%"  id="elemStngs">
					
				</s:NavigatorContent>
			</views:CBViewStack>			
		</s:BorderContainer>
	</s:VGroup>
	<!--</mx:Accordion>-->
	<s:Panel>
		
		
	<s:controlBarContent>
		<s:VGroup width="100%" gap="20">
			<s:Button label="Save" click="onSave()"/>
			<s:Button label="Save to File" click="onFileSave()"/>
			<s:Button label="Load from File" click="onFileLoad()"/>
			<s:Button label="Restore Defaults"/>
			<s:Button label="Close" click="handleCloseEvent()"/>
		</s:VGroup>
	</s:controlBarContent>
	</s:Panel>	
</s:TitleWindow>
