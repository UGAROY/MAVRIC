<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" title="Sign Selection"
			   width="500" height="620"
			   backgroundColor="0xFFFFCC"
			   close="handleCloseEvent()"
			   creationComplete="init()"
			   skinClass="skins.MavricTitleWindowSkin">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			import com.asfusion.mate.events.Dispatcher;
			import com.transcendss.mavric.db.MAVRICDBManager;
			import com.transcendss.mavric.events.DropDownViewEvent;
			import com.transcendss.mavric.managers.ImageManager;
			import com.transcendss.mavric.util.DropDownViewVert;
			import com.transcendss.mavric.util.FileUtility;
			import com.transcendss.mavric.util.PopUpUtils;
			import com.transcendss.transcore.events.*;
			import com.transcendss.transcore.events.UserDataEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.ScrollPolicy;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.components.Image;
			import spark.components.SkinnablePopUpContainer;
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			//[Bindable]
			//[Embed(source="../../../../../images/list.png")] protected var milist:Class
			//
			[Bindable]
			private var gpsUnits:ArrayCollection;
			[Bindable]
			private var mutcdListDP:ArrayCollection;
			private var menuEvent:MenuBarEvent;
			private var dbManager:MAVRICDBManager;
			private var dispatcher:Dispatcher = new Dispatcher();
			private var fileUtil:FileUtility = new FileUtility();
			
			private var PSID:Number;
			
			
			private var signselCatDDView:DropDownViewVert = new DropDownViewVert();
			private var signselsubCatDDView:DropDownViewVert = new DropDownViewVert();
			private var signselSizeDDView:DropDownViewVert = new DropDownViewVert();
			private var signselColorDDView:DropDownViewVert = new DropDownViewVert();
			
			private var signselCatInput:TextInput = new TextInput();
			private var signselsubCatInput:TextInput = new TextInput();
			private var signselSizeInput:TextInput = new TextInput();
			private var signselColorInput:TextInput = new TextInput();
			public var signSelectedCallback:Function;
			
			private var btmp:Bitmap;
			private function init():void{
				try
				{
					PopUpUtils.closeAll(this);
					this.closeButton.visible=true;
					dbManager = MAVRICDBManager.newInstance();
					
					signselCatDDView.domainTableIDColName =  "SIGN_MAJOR_CAT_ID";
					signselCatDDView.fetchDomainValues();
					signselCatInput = signselCatDDView.input;
					signselCatDDView.width_TI = 180;
					signselCatDDView.customCPCallback = getSubCats;
					signselCatDDView.customCPEvent = new DropDownViewEvent(DropDownViewEvent.CATEGORYSELCTED);
					signselCatDDView.bgColor = uint("0xFFFFCC");
					var Catbutton:Button = signselCatDDView.button;
					signselCatDDView.btnText = "Category";
					signselCatDDView.genericPopup.height = 200;
					signselCatDDView.genericPopup.width = 180;
					SSCatGroup.addElement(signselCatDDView);
					
					signselsubCatDDView.domainTableIDColName =  "SIGN_SUB_CATEGORY_ID";
					//signselsubCatDDView.fetchDomainValues("SUB_CAT_DESC");
					signselsubCatInput = signselsubCatDDView.input;
					signselsubCatDDView.width_TI = 180;
					signselsubCatDDView.isEnabled = false;
					signselsubCatDDView.customCPCallback = getMutcdDP;
					signselsubCatDDView.customCPEvent = new DropDownViewEvent(DropDownViewEvent.SUBCATEGORYSELCTED);
					signselsubCatDDView.bgColor = uint("0xFFFFCC");
					var subCatbutton:Button = signselsubCatDDView.button;
					signselsubCatDDView.btnText = "Sub-Cat";
					signselsubCatDDView.genericPopup.height = 200;
					signselsubCatDDView.genericPopup.width = 200;
					SSSubCatGroup.addElement(signselsubCatDDView);
					
					signselSizeDDView.domainTableIDColName =  "DIMENSION_ID";
					signselSizeDDView.fetchDomainValues();
					signselSizeInput = signselSizeDDView.input;
					signselSizeInput = signselSizeDDView.input;
					signselSizeDDView.width_TI = 180;
					signselSizeDDView.bgColor = uint("0xFFFFCC");
					var Sizebutton:Button = signselSizeDDView.button;
					signselSizeDDView.btnText = "Size";
					signselSizeDDView.genericPopup.height = 200;
					signselSizeDDView.genericPopup.width = 150;
					SSSizeGroup.addElement(signselSizeDDView);
					
					signselColorDDView.domainTableIDColName =  "COLOR_ID";
					signselColorDDView.fetchDomainValues();
					signselColorInput = signselCatDDView.input;
					signselColorInput = signselColorDDView.input;
					signselColorDDView.width_TI = 180;
					signselColorDDView.bgColor = uint("0xFFFFCC");
					var Colorbutton:Button = signselColorDDView.button;
					signselColorDDView.btnText = "Color";
					signselColorDDView.genericPopup.height = 200;
					signselColorDDView.genericPopup.width = 150;
					SSColorGroup.addElement(signselColorDDView);
				
				}catch(err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
					
				}
				
				
			}
			public function getSubCats(evt:Event):void
			{
				PSID= new Number(signselCatDDView.domainID);
				
				
//				if (!dbManager.isAssetDomainAvailable("SIGN_SUB_CATEGORY_ID") )
//				{
//					if( this.signselCatDDView.domainID!="")
//					{
//						var httpServ:HTTPService = new HTTPService();
//						httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.serviceURL +"Subcats";
//						httpServ.method = "GET";
//						httpServ.resultFormat = "text";
//						httpServ.addEventListener(FaultEvent.FAULT, fault);
//						httpServ.addEventListener(ResultEvent.RESULT, setSubCatDomainFromService);
//						httpServ.send();
//					}
//				}
//				else // Otherwise get the domains from the local table
//				{
					var ac:ArrayCollection = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getDomain("SIGN_SUB_CATEGORY_ID");
					ac.filterFunction = Domain_FilterFunc;

					ac.refresh();
					signselsubCatDDView.domain = ac;
					
					signselsubCatDDView.isEnabled = true;
				//}
			}
			
			public function getMutcdDP(evnt:Event):void
			{			
				PSID= new Number(signselsubCatDDView.domainID);
//				if (!dbManager.isAssetDomainAvailable("MUTCD") )
//				{
//					if( signselsubCatDDView.domainID!="")
//					{
//						var httpServ:HTTPService = new HTTPService();
//						httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.serviceURL +"MUTCDs";
//						httpServ.method = "GET";
//						httpServ.resultFormat = "text";
//						httpServ.addEventListener(FaultEvent.FAULT, fault);
//						httpServ.addEventListener(ResultEvent.RESULT, setMUTCDDomainFromService);
//						httpServ.send();
//					}
//				}
//				else // Otherwise get the domains from the local table
//				{
					var ac:ArrayCollection =  FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getDomain("MUTCD");
					ac.filterFunction = Domain_FilterFunc;
					ac.refresh();
					mutcdList.dataProvider =ac
					
				//}
			}
			
//			public function setMUTCDDomainFromService(event:ResultEvent):void
//			{
//				
//				var resp:Array = JSON.parse(event.result as String) as Array;
//				var ac:ArrayCollection= new ArrayCollection(resp);
//				dbManager.insertAssetDomain(ac, "MUTCD","SIGN_SUB_CATEGORY_ID");	
//				ac.filterFunction = Domain_FilterFunc;
//				ac.refresh();
//				mutcdList.dataProvider = ac;
//				
//			}
			
//			public function setSubCatDomainFromService(event:ResultEvent):void
//			{
//				var resp:Array = JSON.parse(event.result as String) as Array;
//				var ac:ArrayCollection= new ArrayCollection(resp);
//				dbManager.insertAssetDomain(ac, "SIGN_SUB_CATEGORY_ID", "SIGN_MAJOR_CAT_ID");
//				signselsubCatDDView.domain = ac;
//				signselsubCatDDView.domain.filterFunction = Domain_FilterFunc;
//				signselsubCatDDView.domain.refresh();
//				
//				signselsubCatDDView.isEnabled = true;
//			}
			
			
			
			
			
//			public function customButClick(evt:DropDownViewEvent):void
//			{
//				
//				var domainArrCol:ArrayCollection = signselsubCatDDView.domain;// not really create a new one, like an alias
//				PSID= signselCatDDView.domainID;
//				
//				domainArrCol.filterFunction = Domain_FilterFunc;
//				domainArrCol.refresh();
//				
//				signselsubCatDDView.openPopup();
//			
//			}
			
			private function Domain_FilterFunc(item:Object):Boolean
			{
					return (item.SIGN_MAJOR_CAT_ID == PSID || item.FILTER_COLUMN_DATA == PSID || item.SIGN_SUB_CATEGORY_ID==PSID);
			}
			
			protected function handleCloseEvent():void
			{
				PopUpManager.removePopUp(this);
			}
			
			override protected function closeButton_clickHandler(event:MouseEvent):void
			{
				var eve:PopUpEvent = new PopUpEvent(PopUpEvent.CLOSE);
				handleCloseEvent();
				//dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function OKHandler(event:MouseEvent):void
			{
				try
				{
					var signselectedEvent:DropDownViewEvent = new DropDownViewEvent(DropDownViewEvent.SIGN_SELECTED);
					signselectedEvent.category = signselCatDDView.description;
					signselectedEvent.subcat = signselsubCatDDView.description;
					signselectedEvent.color = signselColorDDView.description;
					var colorArr:Array = signselSizeDDView.description.split("x");
					signselectedEvent.Width = colorArr[0];
					signselectedEvent.Height = colorArr[1];
					signselectedEvent.description = signdesc.text;
					signselectedEvent.mutcdID = mutcdList.selectedItem?new Number(mutcdList.selectedItem.ID):0;
					signselectedEvent.dimensionID=signselSizeDDView.domainID;
					signselectedEvent.colorID= signselColorDDView.domainID;
					//dispatchEvent(signselectedEvent);
					signSelectedCallback.call(null,signselectedEvent);
					PopUpManager.removePopUp(this);
				}catch(err:Error)
				{
					
					FlexGlobals.topLevelApplication.TSSAlert("Please fill out all fields."); //err.getStackTrace()
				}
			}
			
			protected function mutcdList_changeHandler(event:IndexChangeEvent):void
			{
				// Retrieve the sign image from teh image manager
				signdesc.text = StringUtil.trim(mutcdList.selectedItem.DESCRIPTION);
				mutcdImagegrp.removeAllElements();
				
				var imageMngr:ImageManager = new ImageManager();
				btmp = imageMngr.getById(signdesc.text);
				
				btmp = imageMngr.scaleImage(btmp,mutcdImagegrp);
				// If the sign is valid
				if(btmp!=null)
				{
					var uicomp:UIComponent = new UIComponent();
					uicomp.addChild(btmp);
					mutcdImagegrp.addElement(uicomp);
				}	
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout verticalAlign="top"/>
	</s:layout>
	<s:VGroup gap="15" width="100%"  height="485" horizontalAlign="left" paddingTop="10" paddingLeft="20" paddingRight="20" paddingBottom="10">
		<s:HGroup>
			<s:HGroup verticalAlign="middle" id="SSCatGroup"></s:HGroup>
			<s:Spacer width="40"/>
			<s:HGroup verticalAlign="middle" id="SSSubCatGroup"></s:HGroup>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" >
			<s:Label text="Signs by:  " fontWeight="bold"/>
			<s:RadioButton label="MUTCD" selected="true"/>
			<s:RadioButton label="DOT Stock #"/>
		</s:HGroup>
		<s:HGroup height="40%" width="100%">
			<s:List left="0" id="mutcdList" width="50%" height="100%" labelField="DESCRIPTION" fontSize="18" allowMultipleSelection="false" change="mutcdList_changeHandler(event)"/>
			<s:Group id="mutcdImagegrp" width="50%" height="100%"/>
		</s:HGroup>
	
		
		
		<s:HGroup>
			<s:Label id="signdesc" text="" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
		<s:HGroup>
			<s:HGroup verticalAlign="middle" id="SSSizeGroup"></s:HGroup>
			<s:Spacer width="40"/>
			<s:HGroup verticalAlign="middle" id="SSColorGroup"></s:HGroup>
		</s:HGroup>
	</s:VGroup>	
	<s:VGroup width="100%"   horizontalAlign="center" >
		<s:HGroup>
			<s:Button label="OK"  width="100" height="35" click="OKHandler(event)"/>
			<s:Spacer width="20"/>
			<s:Button label="Cancel" width="100" height="35" click="handleCloseEvent()"/>
		</s:HGroup>
	</s:VGroup>	
		
		
	
</s:TitleWindow>
