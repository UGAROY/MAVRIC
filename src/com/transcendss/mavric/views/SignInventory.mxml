<?xml version="1.0" encoding="utf-8"?>
<baseViews:BaseAssetTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mate="http://mate.asfusion.com/"
			   xmlns:components="spark.components.*"
			   xmlns:views="com.transcendss.mavric.views.*"
			   xmlns:baseViews="com.transcendss.mavric.views.baseViews.*"
			   width="920" height="749"  
			   skinClass="skins.MavricTitleWindowSkin"
			   title="Sign Inventory" creationComplete="init()"
			   close="handleCloseEvent()"
			   
			   >
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.db.MAVRICDBManager;
			import com.transcendss.mavric.events.AssetEvent;
			import com.transcendss.mavric.events.DropDownViewEvent;
			import com.transcendss.mavric.events.SignInvEvent;
			import com.transcendss.mavric.util.DropDownViewVert;
			import com.transcendss.transcore.events.CameraEvent;
			import com.transcendss.transcore.events.VoiceEvent;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			import com.transcendss.transcore.sld.models.components.GeoTag;
			import com.transcendss.transcore.sld.models.managers.GeotagsManager;
			import com.transcendss.transcore.util.TSSAudio;
			import com.transcendss.transcore.util.TSSPicture;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.layouts.TileLayout;
		
			private var gtManager:GeotagsManager = new GeotagsManager();
			private var dbManager:MAVRICDBManager;
			
			private var signSelectorForm:SignSelector;
			
			private var signTDDDView:DropDownViewVert = new DropDownViewVert();
			private var signPTDDView:DropDownViewVert = new DropDownViewVert();
			private var signSoRDDView:DropDownViewVert = new DropDownViewVert();
			private var signPSDDView:DropDownViewVert = new DropDownViewVert();
			private var signNoPDDView:DropDownViewVert = new DropDownViewVert();
			private var signNoSDDView:DropDownViewVert = new DropDownViewVert();
			private var signConDDView:DropDownViewVert = new DropDownViewVert();
			
			private var signRatDDView:DropDownViewVert = new DropDownViewVert();
			
			private var signTDInput:TextInput;
			private var signPTInput:TextInput;
			private var signSoRInput:TextInput;
			private var signPSInput:TextInput;
			private var signNoPInput:TextInput;
			private var signNoSInput:TextInput;
			private var signConInput:TextInput
			
			
			private var signRatInput:TextInput;
			
			private var signEvent:SignInvEvent;
			
			private var geoTagsMainArr:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			private var routeList:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			private var textInputWidth:Number = 140;
			
			private var PSIDmin:Number;
			private var PSIDmax:Number;
			
			private var lastPressed:String;
			
			[Bindable]
			private var unknownButH:Number;
			[Bindable]
			private var numOfSigns:Number = 0;
			
			private var currPostDataArr:Array = [];
			private var currentPostID:String= "";
			
			
			private var currentSign:int;
			private var currentAsset:BaseAsset = null;
			private var initialLat:String="";
			private var initialLong:String="";
			private var initialPrec:String="";
			private var initialRefpt:Number;
			
			private var moveToLat:String="";
			private var moveToLong:String="";
			private var moveToPrec:String="";
			private var moveToRefpt:Number;
			private var assetMoved:Boolean = false;
			
			protected function init():void
			{
				try
				{
					assetMoved = false;
					currentAsset=null;
					currentPostID ="";
					
					currPostDataArr = new Array();
					numOfSigns=0;
					dbManager = MAVRICDBManager.newInstance();
					routeList = FlexGlobals.topLevelApplication.GlobalComponents.routeList;
					signRouteInput.text = new String(""+FlexGlobals.topLevelApplication.currentRouteName);
					
					signTDDDView.domainTableIDColName =  "D_DIR_TRAVEL_ID";
					signTDDDView.fetchDomainValues();
					signTDInput = signTDDDView.input;
					var TDbutton:Button = signTDDDView.button;
					signTDDDView.btnText = "Travel Dir";
					signTDDDView.isRequired = true;
					signTDDDView.genericPopup.height = 200;
					STDGroup.addElement(signTDDDView);
					
					signPTDDView.domainTableIDColName =  "D_POST_TY_ID";
					signPTDDView.fetchDomainValues();
					signPTInput = signPTDDView.input;
					var customCPEvt:DropDownViewEvent = new DropDownViewEvent(DropDownViewEvent.POSTTYPESELEVENT);
					signPTDDView.customCPCallback= PTSelctedHandler;
					signPTDDView.customCPEvent = customCPEvt;
					var PTbutton:Button = signPTDDView.button;
					signPTDDView.btnText = "Post Type";
					signPTDDView.isRequired = true;
					signPTDDView.genericPopup.height = 200;
					SPTGroup.addElement(signPTDDView);
					
					signSoRDDView.domainTableIDColName =  "D_SIDE_ROAD_ID";
					signSoRDDView.fetchDomainValues();
					signSoRInput = signSoRDDView.input;
					var SoRbutton:Button = signSoRDDView.button;
					signSoRDDView.btnText = "Side of Road";
					signSoRDDView.isRequired = true;
					signSoRDDView.genericPopup.height = 200;
					signSoRDDView.genericPopup.width = 150;
					SSoRGroup.addElement(signSoRDDView);	
					
					signPSDDView.domainTableIDColName =  "D_POST_SIZE_ID";
					signPSDDView.fetchDomainValues();
					signPSDDView.isEnabled = false;
					signPSDDView.customBCCallback=CustomButtonClick;
					signPSDDView.customBCEvent =  new DropDownViewEvent(DropDownViewEvent.CUSBUTFUNCEVENT);
					signPSInput = signPSDDView.input;
					var PSbutton:Button = signPSDDView.button;
					signPSDDView.btnText = "Post Size";
					signPSDDView.genericPopup.height = 200;
					SPSGroup.addElement(signPSDDView);
					
					//signNoPDDView.domainString =  "D_POST_SIZE";
					//signNoPDDView.fetchDomainValues("DESCRIPTION");
					signNoPDDView.domain = new ArrayCollection([{ID:1,DESCRIPTION:"1"},{ID:2,DESCRIPTION:"2"},{ID:3,DESCRIPTION:"3"},{ID:4,DESCRIPTION:"4"}]);
					signNoPInput = signNoPDDView.input;
					var NoPbutton:Button = signNoPDDView.button;
					signNoPDDView.btnText = "Number of Posts";
					signNoPDDView.isRequired = true;
					signNoPDDView.genericPopup.height = 200;
					
					SNoPGroup.addElement(signNoPDDView);
					
					signNoSDDView.domain = new ArrayCollection([{ID:1,DESCRIPTION:"1"},{ID:2,DESCRIPTION:"2"},{ID:3,DESCRIPTION:"3"},{ID:4,DESCRIPTION:"4"},
						{ID:5,DESCRIPTION:"5"},{ID:6,DESCRIPTION:"6"},{ID:7,DESCRIPTION:"7"},{ID:8,DESCRIPTION:"8"},
						{ID:9,DESCRIPTION:"9"},{ID:10,DESCRIPTION:"10"},{ID:11,DESCRIPTION:"11"},{ID:12,DESCRIPTION:"12"}]);
					signNoSDDView.customCPCallback = NumSignsChanged;
					signNoSDDView.customCPEvent = new DropDownViewEvent(DropDownViewEvent.NUMSIGNSSELEVENT);
					signNoSInput = signNoSDDView.input;
					var NoSbutton:Button = signNoSDDView.button;
					signNoSDDView.btnText = "Number of Signs";
					signNoSDDView.isRequired = true;
					signNoSDDView.genericPopup.height = 200;
					SNoSGroup.addElement(signNoSDDView);
					
					signConDDView.domainTableIDColName =  "D_SIGN_RATING_ID";
					signConDDView.fetchDomainValues();
					signConInput = signConDDView.input;
					var Conbutton:Button = signConDDView.button;
					signConDDView.btnText = "Condition";
					signConDDView.genericPopup.height = 150;
					signConDDView.genericPopup.width = 150;
					SConGroup.addElement(signConDDView);
					
					
					//init Sign Stack ... temp
					for (var i:int = 1; i <= numOfSigns; i++)
					{
						addNewSignTab(i);
						geoTagsMainArr.addItemAt(new Array(),i-1);
					}
					var cEvent:AssetEvent = new AssetEvent(AssetEvent.CULVERTFORMLOADED);
					dispatchEvent(cEvent);
					

				} catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
			}

			private function addNewSignTab(i:int):void
			{
				var linkButton:Button = new Button();
				linkButton.label = i.toString();
				linkButton.id = i.toString() +"_inv";
				if(i == numOfSigns)
					linkButton.enabled = false;
				linkButton.addEventListener(MouseEvent.CLICK, SignNumOnClick);
				SignTabsHeader.addElement(linkButton);
				
				var linkButton2:Button = new Button();
				linkButton2.label = i.toString();
				linkButton2.id = i.toString()+"_insp";
				if(i == numOfSigns)
					linkButton2.enabled = false;
				linkButton2.addEventListener(MouseEvent.CLICK, SignNumOnClick);
				SignTabsHeader_insp.addElement(linkButton2);
				
				var linkButton3:Button = new Button();
				linkButton3.label = i.toString();
				linkButton3.id = i.toString()+"_attach";
				if(i == numOfSigns)
					linkButton3.enabled = false;
				linkButton3.addEventListener(MouseEvent.CLICK, SignNumOnClick);
				SignTabsHeader_attach.addElement(linkButton3);
				
				
				var signTabView:SignTabView = new SignTabView();
				signTabView.id = i.toString() + "signTab";
				signTabGroup.addElement(signTabView);
				
				var signInspTabView:SignInspTabView = new SignInspTabView();
				signInspTabView.id = i.toString() + "signInspTab";
				signInspTabGroup.addElement(signInspTabView);
				
				var signAttachGroup:Group = new Group();
				signAttachGroup.layout = new TileLayout();
				signAttachGroup.id = i.toString() + "signAttach";
				signAttachTabGroup.addElement(signAttachGroup);
				
				signTabView.messageKeyUpHandler = signMessageKeyUpHandler;
			}
			
			private function signMessageKeyUpHandler(mess:String):void{
				var tempInspSignTab:SignInspTabView = signInspTabGroup.getElementAt(this.currentSign-1) as SignInspTabView;
				tempInspSignTab.inspsignMessage.text = mess;
			}
			private function deleteSignTab(num:int):void
			{
				//remove the link
				for (var i:int = 1 ; i <= numOfSigns ; i++)
				{
					if(num == i)
					{
						SignTabsHeader.removeElement(SignTabsHeader.getElementAt(i-1) as Button);
						SignTabsHeader_insp.removeElement( SignTabsHeader_insp.getElementAt(i-1) as Button);
						SignTabsHeader_attach.removeElement(SignTabsHeader_attach.getElementAt(i-1) as Button);
					}
				}
				
				//remove the tabs
				signTabGroup.removeElementAt(num-1);
				signInspTabGroup.removeElementAt(num-1);
				signAttachTabGroup.removeElementAt(num-1);
				
				
				//decrement the num of signs and select the last sign.
				this.numOfSigns--;
				SignSelected(String(numOfSigns));
			}
			
			private function SignNumOnClick(event:MouseEvent):void
			{
				currentSign = new int((event.target as Button).label);
				SignSelected((event.target as Button).label);
			}
			
			private function SignSelected(num:String):void
			{
				for (var i:int = 1 ; i <= numOfSigns ; i++)
				{
					var tempButton_inv:Button = SignTabsHeader.getElementAt(i-1) as Button;
					var tempButton_insp:Button = SignTabsHeader_insp.getElementAt(i-1) as Button;
					var tempButton_attach:Button = SignTabsHeader_attach.getElementAt(i-1) as Button;
					if(num == i.toString())
					{
						tempButton_insp.enabled = false;
						tempButton_inv.enabled = false;
						tempButton_attach.enabled = false;
						showSignTab(i);
					}
					else
					{
						tempButton_insp.enabled = true;
						tempButton_inv.enabled = true;
						tempButton_attach.enabled = true;
					}
				}
			}
			
			
			private function showSignTab(i:int):void
			{
				for (var j:int = 1; j <= numOfSigns; j++)
				{
					var tempSignTab:SignTabView = signTabGroup.getElementAt(j -1) as SignTabView;
					var tempInspSignTab:SignInspTabView = signInspTabGroup.getElementAt(j-1) as SignInspTabView;
					var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(j-1) as Group;
					if(i != j)
					{
						tempSignTab.visible = false;
						tempInspSignTab.visible = false;
						tempAttachSignTab.visible = false;
					}
					else
					{
						tempSignTab.visible = true;
						tempInspSignTab.visible = true;
						tempAttachSignTab.visible = true;
					}
				}
			}
			
			

			public override function handleCloseEvent(event:Event = null):void 
			{
				if(event != null)
				{
					dispatchEvent(event);
				}
				else if(currentAsset != null )
				{
					var culEvent:AssetEvent = new AssetEvent(AssetEvent.NEWCULVERT, true, true);
					culEvent.saveCulvert = false;
					culEvent.culvert = currentAsset;
					dispatchEvent(culEvent);
					
					deleteUnsavedGeotagFiles();
				}
				removeEventListeners();
				closeAllPopUps();
				PopUpManager.removePopUp(this);
				//this = null;
				
				
			}
			
			private function closeAllPopUps():void
			{
				
			}
			
			private function removeEventListeners():void
			{
//				this.removeEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE,keyBoardOn);
//				this.removeEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE,keyBoardOff);
			}
			
			
			
			protected function SelectSign_clickHandler():void
			{
				signSelectorForm = PopUpManager.createPopUp(this, SignSelector) as SignSelector;
				(signSelectorForm as SignSelector).signSelectedCallback = signSelectCompleteHandler;
				PopUpManager.centerPopUp(signSelectorForm);
			}
			
			public function PTSelctedHandler(event:Event):void
			{
				signPSDDView.isEnabled = true;
			}
			
			public function NumSignsChanged(event:Event):void
			{
				var i:int;
				//if the new selection is greater than the current num of signs create more tabs
				if(this.numOfSigns<new Number(signNoSDDView.domainID))
				{
						
					for(i = this.numOfSigns+1; i<=new Number(signNoSDDView.domainID); i++)
					{
						this.addNewSignTab(i);
						geoTagsMainArr.addItem(new ArrayCollection());
					}
					numOfSigns =new Number(signNoSDDView.domainID);
					this.currentSign = this.numOfSigns;
					if(numOfSigns > 0)
					{
						this.currentSign = 1;
						SignSelected("1");
					}
					
				}//else if the new selection is less than the current num of signs delete the tabs greater than the current selection
				else if(this.numOfSigns> new Number(signNoSDDView.domainID))
				{
					//Maybe show alert to confirm the deletion?
					for(i = this.numOfSigns; i>new Number(signNoSDDView.domainID); i--)
					{
						this.deleteSignTab(i);
						(currPostDataArr[i-1] as BaseAsset).invProperties["RETIRED"]= true;
					}
				}
				
				
				
			}
			
			public function CustomButtonClick(event:Event):void //.........need to be public in order to be driven by mate event
			{

				var domainArrCol:ArrayCollection = signPSDDView.domain;// not really create a new one, like an alias
				switch(signPTDDView.domainID)
				{
					case "1":
					PSIDmin = 1;
					PSIDmax = 8;
					domainArrCol.filterFunction = Domain_FilterFunc;
					domainArrCol.refresh();
					signPSDDView.openPopup();
					break;
					case "2":
					PSIDmin = 9;
					PSIDmax = 13;
					domainArrCol.filterFunction = Domain_FilterFunc;
					domainArrCol.refresh();
					signPSDDView.openPopup();
					case "3":
					signPSDDView.description = "N/A";
					break;
					case "4":
					signPSDDView.description = "N/A";
					break;
					case "5":
					PSIDmin = 16;
					PSIDmax = 18;
					domainArrCol.filterFunction = Domain_FilterFunc;
					domainArrCol.refresh();
					signPSDDView.openPopup();
					case "6":
					PSIDmin = 19;
					PSIDmax = 24;
					domainArrCol.filterFunction = Domain_FilterFunc;
					domainArrCol.refresh();
					signPSDDView.openPopup();
					case "7":
					PSIDmin = 25;
					PSIDmax = 30;
					domainArrCol.filterFunction = Domain_FilterFunc;
					domainArrCol.refresh();
					signPSDDView.openPopup();
					default:
					break;
				}
			}
			
			private function Domain_FilterFunc(item:Object):Boolean
			{
				if(item.ID >= PSIDmin && item.ID <= PSIDmax)
					return true;
				else
					return false;
			}
		
			//pouplate the selected values from the signselector in the current selected tab 
			public function signSelectCompleteHandler(evt:DropDownViewEvent):void
			{
//				numOfSigns++;
//				addNewSignTab(numOfSigns);
//				SignSelected(numOfSigns.toString());
				var currSignTab:SignTabView = signTabGroup.getElementAt(this.currentSign-1) as SignTabView;
				currSignTab.Category.text = evt.category;
				currSignTab.Sub_Cat.text = evt.subcat;
				currSignTab.signWidth.text = evt.Width.toString();
				currSignTab.signHeight.text = evt.Height.toString();
				currSignTab.signDescription.text = evt.description;
				currSignTab.colorID = evt.colorID;
				currSignTab.dimensionID = evt.dimensionID;
				currSignTab.mutcdID = evt.mutcdID;
				currSignTab.signColor.text = evt.color;
				
				currSignTab.setSignImage();
				
				var currInspSignTab:SignInspTabView = this.signInspTabGroup.getElementAt(this.currentSign-1) as SignInspTabView;
				currInspSignTab.inspSignDescription.text = evt.description;
				
			}
			
		
			
			
			
			public override function handlePicture(event:CameraEvent):void
			{
				event.stopImmediatePropagation();
				if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SignInventory")
				{
					var asstID:String ;
					var asset_base_id:String;
					if(this.currPostDataArr != null && this.currPostDataArr.length>this.currentSign-1)
					{
						var ast:BaseAsset = (this.currPostDataArr[this.currentSign-1] as BaseAsset);
						
						asstID= ast.invProperties[ast.primaryKey].value?String(ast.invProperties[ast.primaryKey].value):"-1";
						asset_base_id= ast.invProperties["ASSET_BASE_ID"].value
							?
							String(ast.invProperties["ASSET_BASE_ID"].value)
							:"";
					}
					else
					{
						asset_base_id="";
						asstID="";
					}
					
					
					var bmp:Bitmap = event.bitmap;
					var tmpImage:TSSPicture = new TSSPicture();
					tmpImage.source = bmp; //icon is now the captured image itself
					tmpImage.bitmap = bmp;
					//					tmpImage.x = stickGroup.horizontalScrollPosition + (stickGroup.width / 2) - 20;
					//					tmpImage.y =getIconY("image");
					tmpImage.width = 40;//120;
					tmpImage.height = 40;//120;
					
					
					var fileName:String = new Date().time + ".png";
					var tmpGT:GeoTag = new GeoTag();
					tmpGT.cached_route_id = this.signRouteInput.text;
					if(this.milepostTextInut.text=="")
						tmpGT.begin_mile_point = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP() ;
					 
					if(asset_base_id != null && asset_base_id !="")
					{
						tmpGT.asset_base_id = asset_base_id;
						tmpGT.local_asset_id = ""+asstID;
					}
					else if ( asstID!=null && asstID != "")
					{
						tmpGT.local_asset_id = asstID;
						tmpGT.asset_base_id = "";
					}
					else
					{
						tmpGT.local_asset_id = "";
						tmpGT.asset_base_id = "";
					}
					tmpGT.end_mile_point = 0;
					tmpGT.image_file_name = fileName;
					tmpGT.text_memo ="";
					
					
					tmpGT.asset_ty_id = this.currentAsset!=null?currentAsset.assetType:"5";
					
					(this.geoTagsMainArr[this.currentSign-1] as ArrayCollection).addItem(tmpGT);
					
					tmpImage.geoTag = tmpGT;
					var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(this.currentSign-1) as Group;
					tempAttachSignTab.addElement(tmpImage);
					
				}
				try
				{
					FlexGlobals.topLevelApplication.setBusyStatus(true);
					fileUtility.WritePicture(fileName, bmp);
					FlexGlobals.topLevelApplication.setBusyStatus(false);
				} catch (er:Error)
				{
					FlexGlobals.topLevelApplication.setBusyStatus(false);
					FlexGlobals.topLevelApplication.TSSAlert(er.message);
				}
			}
			
			
			
			public override function handleVoiceMemo(event:VoiceEvent):void
			{
				event.stopImmediatePropagation();
				if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SignInventory" )
				{
					var asstID:String;
					var soundBytes:ByteArray=event.byteArray;
					var asset_base_id:String;
					if(this.currPostDataArr != null && this.currPostDataArr.length>this.currentSign-1)
					{
						var ast:BaseAsset = (this.currPostDataArr[this.currentSign-1] as BaseAsset);
						
						asstID= ast.invProperties[ast.primaryKey].value?String(ast.invProperties[ast.primaryKey].value):"-1";
						asset_base_id= ast.invProperties["ASSET_BASE_ID"].value
							?
							String(ast.invProperties["ASSET_BASE_ID"].value)
							:"";
					}
					else
					{
						asset_base_id="";
						asstID="";
					}
					var tmpImage:TSSAudio = new TSSAudio();
					tmpImage.source = gtManager.voice;
					tmpImage.soundBytes = event.byteArray;
					//					tmpImage.x = stickGroup.horizontalScrollPosition + (stickGroup.width / 2) - 20;
					//					
					//					tmpImage.y =  getIconY("voice");
					tmpImage.width = 40;
					tmpImage.height = 40;
					var fileName:String = new Date().time +".wav";
					
					var tmpGT:GeoTag = new GeoTag();
					tmpGT.cached_route_id = this.signRouteInput.text;
					if(this.milepostTextInut.text=="")
						tmpGT.begin_mile_point =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					
					if(asset_base_id != null && asset_base_id !="")
					{
						tmpGT.asset_base_id = asset_base_id;
						tmpGT.local_asset_id = ""+asstID;
					}
					else if ( asstID!=null && asstID != "")
					{
						tmpGT.local_asset_id = asstID;
						tmpGT.asset_base_id = "";
					}
					else
					{
						tmpGT.local_asset_id = "";
						tmpGT.asset_base_id = "";
					}
					tmpGT.end_mile_point = 0;
					tmpGT.image_file_name = "";
					tmpGT.voice_file_name= fileName;
					tmpGT.video_file_name="";
					tmpGT.image_file_name="";
					tmpGT.text_memo = "";
					
					tmpGT.asset_ty_id = this.currentAsset!=null?currentAsset.assetType:"5";
					
					(this.geoTagsMainArr[this.currentSign-1] as ArrayCollection).addItem(tmpGT);
					
					tmpImage.geoTag = tmpGT;
					var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(this.currentSign-1) as Group;
					tempAttachSignTab.addElement(tmpImage);
					
					try{
						FlexGlobals.topLevelApplication.setBusyStatus(true);
						fileUtility.saveToWAV(event.byteArray, fileName);
						FlexGlobals.topLevelApplication.setBusyStatus(false);
					}
					catch(e:Error){
						FlexGlobals.topLevelApplication.setBusyStatus(false);
						FlexGlobals.topLevelApplication.TSSAlert(e.message);
					}
					
					
				}
			}
			
			
			
			private function onSave():void
			{
				var assmblyLocalID:String="";
				signEvent = new SignInvEvent(SignInvEvent.NEWSIGNEVENT, true, true);
				
				try
				{
						if(currentPostID == "" || currentPostID == "null" )//if new sign
							assmblyLocalID = String(this.dbManager.assignSignAssemblyLocalID());
						else
							assmblyLocalID = currentPostID;
						if(numOfSigns<1)
							throw new Error("Please select at least one sign");
						for(var i:Number=0;i<this.numOfSigns;i++)//for each sign create a base asset and add
						{
							var baseAsst:BaseAsset;
							if (this.currPostDataArr != null && currPostDataArr.length>0 && currPostDataArr.length>=i && currPostDataArr[i]!=null)
							{
								baseAsst = currPostDataArr[i];
							}
							else
							{
								baseAsst = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.createAsset( "SIGN", -1, -2);
							}
							 
							if(this.retireChk.selected)
							{
								baseAsst.invProperties["RETIRED"].value =1;
								//format any dates
								baseAsst.invProperties["DATE_IN_SERVICE"].value=  formatter.format(baseAsst.invProperties["DATE_IN_SERVICE"].value);
								baseAsst.inspProperties["INSP_DT"].value=saveformatter.format(baseAsst.inspProperties["INSP_DT"].value);
							}
							else
							{
								//set inv properties
								var tempSignTab:SignTabView = signTabGroup.getElementAt(i) as SignTabView;
								tempSignTab.exportSignInfoToBaseAsset(baseAsst,i+1);
								//add post properties
								//baseAsst.invProperties["ROUTE_NAME"].value= FlexGlobals.topLevelApplication.GlobalComponents.stkDiagram.route.routeName;
								baseAsst.invProperties[baseAsst.routeIDColName].value= FlexGlobals.topLevelApplication.currentRouteName;
								//baseAsst.invProperties["ASSET_BASE_ID"].value =asset_base_id;
								baseAsst.invProperties["COUNTY_NUM"].value = "";
								if(signSoRDDView.input.text != null && signSoRDDView.input.text !="")
									baseAsst.invProperties["D_SIDE_ROAD_ID"].value =signSoRDDView.domainIDStr;
								else
									throw new Error("Please select a Side of Road")
								if(signTDDDView.input.text != null && signTDDDView.input.text !="")
									baseAsst.invProperties["D_DIR_TRAVEL_ID"].value=signTDDDView.domainIDStr;
								else
									throw new Error("Please select a Travel Direction")
								baseAsst.invProperties["D_POST_SIZE_ID"].value=signPSDDView.domainIDStr;
								if(signPTDDView.input.text != null && signPTDDView.input.text != "")
									baseAsst.invProperties["D_POST_TY_ID"].value=signPTDDView.domainIDStr;
								else
									throw new Error("Please select a Post Type")
								baseAsst.invProperties["D_POST_RATING_ID"].value=signConDDView.domainIDStr;
								
								if(signNoSDDView.input.text != null && signNoSDDView.input.text != "")
									baseAsst.invProperties["NUM_OF_SIGNS"].value=this.signNoSDDView.domainIDStr;
								else
									throw new Error("Please select the number of signs")
									
								if(signNoPDDView.input.text != null && signNoPDDView.input.text != "")
									baseAsst.invProperties["NUM_OF_POSTS"].value=this.signNoPDDView.domainIDStr;
								else
									throw new Error("Please select the number of posts");
								baseAsst.invProperties["LATERAL_OFFSET"].value = this.latOffset.text;
								baseAsst.invProperties["POST_LENGTH"].value = this.postLength.text;
								baseAsst.invProperties["LOC_COMMENT"].value = encodeURI(this.locComment.text);
								if(baseAsst.invProperties["HAS_SIBLINGS"])
								baseAsst.invProperties["HAS_SIBLINGS"].value = String(this.numOfSigns>1).toLowerCase();
								
								baseAsst.subType = baseAsst.invProperties[baseAsst.typeKey].value;
								
								if(currentPostID == "" || currentPostID == "null" || baseAsst.id == -1 )//if new sign
								{
									baseAsst.invProperties[baseAsst.primaryKey].value = -1;
									if(baseAsst.invProperties["ASSET_BASE_ID"])
										baseAsst.invProperties["ASSET_BASE_ID"].value="";
									baseAsst.invProperties["ASSEMBLY_ID"].value="";
									baseAsst.invProperties["ASSEMBLY_LOCAL_ID"].value=assmblyLocalID;//get max ASSEMBLY_LOCAL_ID +1 from db where assembly_id =""
									if(baseAsst.invProperties["HAS_SIBLINGS"])
										baseAsst.invProperties["HAS_SIBLINGS"].value = numOfSigns>1;
									baseAsst.setAssetLocation("LATITUDE","LONGITUDE",initialRefpt,initialLat,initialLong,initialPrec);
								}
								
								if(assetMoved)
									baseAsst.setAssetLocation("LATITUDE","LONGITUDE",moveToRefpt, moveToLat, moveToLong,moveToPrec);
								
								//set insp properties
								var tempInspSignTab:SignInspTabView = signInspTabGroup.getElementAt(i) as SignInspTabView;
								tempInspSignTab.exportSignInspInfoToBaseAsset(baseAsst);
								
								if(i<geoTagsMainArr.length)
									baseAsst.geotagsArray= geoTagsMainArr.getItemAt(i) as ArrayCollection;
							}
							signEvent.signs.addItem(baseAsst);
						}
						
						handleCloseEvent(signEvent);
				}
				catch(e:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(e.message);
				}
			}
			
			public override function setBaseAsset(baseAsst:BaseAsset):void
			{
				initialLat=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Lat;
				initialLong=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Long;
				
				initialPrec =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Precision;
				initialRefpt = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
				
				assetMoved = false;
				currentAsset=null;
				currentPostID ="";
				
				currPostDataArr = new Array();
				numOfSigns=0;
				
				currentAsset = baseAsst;
				currentPostID= baseAsst.invProperties["ASSEMBLY_ID"].value?String(baseAsst.invProperties["ASSEMBLY_ID"].value):baseAsst.invProperties["ASSEMBLY_LOCAL_ID"].value?String(baseAsst.invProperties["ASSEMBLY_LOCAL_ID"].value):"";
				
				if(currentPostID != "")
					currPostDataArr = FlexGlobals.topLevelApplication.GlobalComponents.stkDiagram.getAllSignsByPostID(currentPostID);//get from stick
				if(currPostDataArr.length==0 && currentPostID!="")
					currPostDataArr = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.mapAssetColl(this.dbManager.getAllSignsByAssemblyID(currentPostID, baseAsst.primaryKey),"SIGN"); ;
				
				signRouteInput.text= FlexGlobals.topLevelApplication.currentRouteName;
				
				var milepostTI:String = baseAsst.invProperties[baseAsst.fromMeasureColName].value?baseAsst.invProperties[baseAsst.fromMeasureColName].value:String(initialRefpt);
				milepostTextInut.text = parseFloat(milepostTI).toFixed(3);
				
				signSoRDDView.domainID = baseAsst.invProperties["D_SIDE_ROAD_ID"].value?baseAsst.invProperties["D_SIDE_ROAD_ID"].value:"";
				
				signTDDDView.domainID = baseAsst.invProperties["D_DIR_TRAVEL_ID"].value?baseAsst.invProperties["D_DIR_TRAVEL_ID"].value:"";
				signPSDDView.domainID =  baseAsst.invProperties["D_POST_SIZE_ID"].value?baseAsst.invProperties["D_POST_SIZE_ID"].value:"";
				signPTDDView.domainID = baseAsst.invProperties["D_POST_TY_ID"].value?baseAsst.invProperties["D_POST_TY_ID"].value:"";
				if(signPTDDView.domainID!="")
					signPSDDView.isEnabled = true;
				signConDDView.domainID = baseAsst.invProperties["D_POST_RATING_ID"].value?baseAsst.invProperties["D_POST_RATING_ID"].value:"";
				numOfSigns = baseAsst.invProperties["NUM_OF_SIGNS"].value;
				
				
				this.signNoSDDView.domainID = baseAsst.invProperties["NUM_OF_SIGNS"].value?baseAsst.invProperties["NUM_OF_SIGNS"].value:"";
				this.signNoPDDView.domainID = baseAsst.invProperties["NUM_OF_POSTS"].value?baseAsst.invProperties["NUM_OF_POSTS"].value:"";
				this.latOffset.text= baseAsst.invProperties["LATERAL_OFFSET"].value;
				this.postLength.text = baseAsst.invProperties["POST_LENGTH"].value ;
				this.locComment.text = baseAsst.invProperties["LOC_COMMENT"].value?decodeURI(baseAsst.invProperties["LOC_COMMENT"].value):"" ;
				if(currPostDataArr!=null && currPostDataArr.length>0)
				{
					for (var i:int = 1; i <= numOfSigns; i++)
					{
						this.currentSign = i;
						addNewSignTab(i);
						geoTagsMainArr.addItemAt(new ArrayCollection(),i-1);
						
						if(currPostDataArr[i-1] as BaseAsset!=null)
						{
							var tempSignTab:SignTabView = signTabGroup.getElementAt(i-1) as SignTabView;
							var tempInspSignTab:SignInspTabView = signInspTabGroup.getElementAt(i-1) as SignInspTabView;
	//						
							tempSignTab.loadSelectedSignInfo(currPostDataArr[i-1] as BaseAsset);
							tempInspSignTab.loadSelectedSignInspInfo(currPostDataArr[i-1] as BaseAsset);
							if((currPostDataArr[i-1] as BaseAsset).invProperties["ASSET_BASE_ID"]) //TODO:Workaround this for geotags
								loadGeotags((currPostDataArr[i-1] as BaseAsset).id,(currPostDataArr[i-1] as BaseAsset).invProperties["ASSET_BASE_ID"].value,(currPostDataArr[i-1] as BaseAsset).assetType, i-1);
							if((currPostDataArr[i-1] as BaseAsset).id ==-1)
								(currPostDataArr[i-1] as BaseAsset).setAssetLocation("LATITUDE","LONGITUDE",initialRefpt,initialLat,initialLong,initialPrec);
						}
					}
					if(numOfSigns > 0)
						SignSelected("1");
					
				}
				
				if(baseAsst.invProperties["RETIRED"].value==1)
				{
					this.retireChk.selected = true;
					this.retireOkay(true);
					
				}
			}
			
			protected function retireChk_changeHandler(event:Event):void
			{
				if(this.retireChk.selected)
				{	
					var _retireResp:mx.rpc.Responder = new mx.rpc.Responder(retireOkay, fault);
					
					FlexGlobals.topLevelApplication.YesNoPrompt("Are you sure you want to retire this record? All the local changes made to the asset will be discarded on retirement.", "Retire Asset Confirmation", _retireResp);
					
					
					function fault(data:Object):void
					{	
						FlexGlobals.topLevelApplication.TSSAlert("Error in Opening Retire Confirmation Dialog.");
					}
					
				}
				
			}
			
			protected function retireOkay(data:Object):void
			{
				if(data == true)
				{
					for (var forIndex:int = 0; forIndex < viewStack.numChildren; forIndex++)
					{
						var curr:DisplayObject = viewStack.getChildAt(forIndex);
						if (curr is UIComponent)
						{
							var curr2:UIComponent = curr as UIComponent;
							curr2.enabled = false;
						}
					}
				}
			}
			
			private function loadGeotags(assetID:int,assetBaseID:String, assetType:String, assetIndex:int):void
			{
				// load local geotags
				if (assetID != -1)
				{
					var gtArray:Array = dbManager.getLocalGeoTags(assetID, assetType);
					//"/sdcard/geotags/" + aName
					//var tmpFile:File = File.applicationStorageDirectory;
					for (var gti:int=0;gti<gtArray.length;gti++)
					{
						var tmpMedia:Object = new Object();
						var tmpGT:GeoTag = gtArray[gti] as GeoTag;	
						tmpGT.asset_ty_id = assetType;
						var viE:* = new GeotagsManager().ConvertGeotags(tmpGT,"","local");
						if(viE)
						{
//							if(viE is TSSPicture)
//								picArray.addItem(viE);
							var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(assetIndex) as Group;
							tempAttachSignTab.addElement(viE);
						}
						//FlexGlobals.topLevelApplication.addListenersToGeoTag(tmpMedia);
						tmpMedia.geoTag = tmpGT;
						tmpMedia.geoLocalId = tmpGT.id;
					}
					
				}
				
//				if(assetBaseID != null && assetBaseID != "")
//				{
//				    var httpServ:HTTPService = new HTTPService();
//					httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.serviceURL+"Geotags/"+assetBaseID;
//					httpServ.method = "GET";
//					
//					httpServ.resultFormat = "text";
//					httpServ.addEventListener( FaultEvent.FAULT, fault);
//					httpServ.addEventListener( ResultEvent.RESULT, function(event:ResultEvent):void{setGeotagsFromServer(assetIndex,JSON.parse(event.result as String) as Array);});
//					httpServ.send();
//					this.retireChk.enabled = true;
//					
//				}else
//				{
//					this.retireChk.enabled = false;
//					
//				}
				
				var baseAsset:BaseAsset = currPostDataArr[assetIndex-1] as BaseAsset;
				
				if(FlexGlobals.topLevelApplication.connected  && baseAsset.id!=-1 && baseAsset.status!='NEW')
				{
					FlexGlobals.topLevelApplication.setBusyStatus(true);
					var httpServ:HTTPService = new HTTPService();
					httpServ.method = "GET";
					httpServ.resultFormat = "text";
					httpServ.addEventListener( FaultEvent.FAULT, assetGTFaultHandler);
					
					if(FlexGlobals.topLevelApplication.useAgsService  )
					{
						var layerID:String =FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getEventLayerID(baseAsset.description);
						httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(layerID ,String( baseAsset.id));
						httpServ.addEventListener( ResultEvent.RESULT, function(event:ResultEvent):void{
							var attachments:Object = JSON.parse(event.result as String);
							
							setGeotagsFromServer(assetIndex,attachments.attachmentInfos as Array, layerID );
						});
						
					}
					else if(baseAsset.invProperties["ASSET_BASE_ID"] && String(baseAsset.invProperties["ASSET_BASE_ID"].value) !=""  && baseAsset.invProperties["ASSET_BASE_ID"].value !=null )
					{
						httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.serviceURL+"Geotags/"+String(baseAsset.invProperties["ASSET_BASE_ID"].value);
						httpServ.addEventListener( ResultEvent.RESULT, function(event:ResultEvent):void{
							setGeotagsFromServer(assetIndex,JSON.parse(event.result as String) as Array);
						});
					}
					if(httpServ.url)
						httpServ.send();
				}
				
				
				//if editing an asset from server
				if((baseAsset.invProperties["ASSET_BASE_ID"] && String(baseAsset.invProperties["ASSET_BASE_ID"].value) !="") )
					//|| (String(baseAsset.invProperties["STATUS"].value) =='EDITED'))
					this.retireChk.enabled = true;
				else
					this.retireChk.enabled = false;
			}
			
			
			
			private function setGeotagsFromServer(assetIndex:int, gtArray:Array, layerID:String=""):void
			{
				
				var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(assetIndex) as Group;
				var legacyValues:BaseAsset = currPostDataArr[assetIndex-1] as BaseAsset;
				gtManager.setGeotags(
					tempAttachSignTab,
					gtArray,
					legacyValues.assetType,
					String(legacyValues.id),
					legacyValues.routeName,
					Number(legacyValues.invProperties[legacyValues.fromMeasureColName].value),
					"",
					legacyValues.invProperties[legacyValues.toMeasureColName]?Number(legacyValues.invProperties[legacyValues.toMeasureColName].value):0,layerID);
				
				
//				for (var gti:int=0;gti<gtArray.length;gti++)
//				{
//					var insp:Number = (String(gtArray[gti].IS_INSP)=="0")?0:1;
//					var tmpGT:GeoTag = new GeoTag(Number(gtArray[gti].ATTACH_ID),String(gtArray[gti].ASSET_TYPE)!=""?String(gtArray[gti].ASSET_TYPE):"1", String(gtArray[gti].ROUTE_NAME),String(gtArray[gti].ASSET_BASE_ID),""
//						,(String(gtArray[gti].IS_INSP)=="0")?0:1,Number(gtArray[gti].BEGIN_MILE),Number(gtArray[gti].END_MILE),String(gtArray[gti].IMAGE_FILENAME),String(gtArray[gti].VIDEO_FILENAME),String(gtArray[gti].VOICE_FILENAME),String(gtArray[gti].TEXT_MEMO));
//					
//					var viE:* = gtManager.ConvertGeotags(tmpGT, String(gtArray[gti].URL));
//					if(viE)
//					{
//						
//						tempAttachSignTab.addElement(viE);
//					}
//					
//				}
			}
			
			public override function removeGeoTag(tssmedia:Object):void
			{
				var elm:IVisualElement = tssmedia as IVisualElement;				
				
				var tempAttachSignTab:Group = signAttachTabGroup.getElementAt(this.currentSign-1) as Group;
				tempAttachSignTab.removeElement(elm);
				
				var index:Number = (this.geoTagsMainArr[this.currentSign-1] as ArrayCollection).getItemIndex(tssmedia.geoTag);
				if(index != -1)
					(this.geoTagsMainArr[this.currentSign-1] as ArrayCollection).removeItemAt(index);
			}
			protected function moveBtn_changeHandler(event:Event):void
			{
				moveToLat=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Lat;
				moveToLong=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Long;
				moveToPrec =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Precision;
				moveToRefpt = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
				assetMoved = true;
				
			}
			// handle missing fields code blocks
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter
			id="saveformatter"
			dateTimePattern="MM/dd/yyyy HH:mm:ss"
			errorText=""
			useUTC="false"
			/>
		<s:DateTimeFormatter
			id="formatter"
			dateTimePattern="MM/dd/yyyy"
			errorText=""
			useUTC="false"
			/>
	</fx:Declarations>
	
	
	<s:HGroup>
		<s:Button label="Position/Post" enabled="{viewStack.selectedChild != Ppost}" click="{viewStack.selectedChild= Ppost}"/>
		<s:Button label="Sign" enabled="{viewStack.selectedChild !=Sign}" click="{viewStack.selectedChild=Sign}"/>
		<s:Button label="Inspection" enabled="{viewStack.selectedChild !=Inspection}" click="{viewStack.selectedChild=Inspection}"/>
		<s:Button label="Attachments" enabled="{viewStack.selectedChild !=Attachments}" click="{viewStack.selectedChild=Attachments}"/>
	</s:HGroup>
	<views:CBViewStack id="viewStack" width="100%" height="100%" skinClass="skins.CBScrollableSkin">
		<s:VGroup id="Ppost" paddingLeft="20" paddingTop="20">
			<s:Spacer height="10"/>
			<s:HGroup verticalAlign="middle">
				<s:VGroup>
					<s:HGroup verticalAlign="middle">
						<s:Label text="Route:  " fontWeight="bold"/>
						<s:TextInput id="signRouteInput" width="{textInputWidth}" editable="false"/>
						<s:Spacer width="20"/>
						<s:Label text="Milepoint:  "  fontWeight="bold"/>
						<s:TextInput id= "milepostTextInut" width="{textInputWidth}" editable="false"/>
					</s:HGroup>
					<s:Spacer height="25"/>
					<s:HGroup verticalAlign="middle" >
						<s:HGroup verticalAlign="middle" id="STDGroup"></s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:Spacer width="25" />
				<s:VGroup>
					<s:Label text="Location Comment:  " fontWeight="bold"/>
					<s:TextArea height="140" width="320" id= "locComment"/>
				</s:VGroup>
			</s:HGroup>
			<s:Spacer height="10"/>
			<s:HGroup>
				<s:VGroup gap="20">
					<s:HGroup>
						<s:HGroup verticalAlign="middle" id="SPTGroup"></s:HGroup>
						<s:Spacer width="100"/>
						<s:HGroup verticalAlign="middle" id="SSoRGroup"></s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle">
						<s:HGroup verticalAlign="middle" id="SPSGroup"></s:HGroup>
						<s:Spacer width="100"/>
						<s:HGroup verticalAlign="middle" id="SNoPGroup"></s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle">
						<s:Label text="Lateral Offset:  " fontWeight="bold"/>
						<s:TextInput width="{textInputWidth}" id="latOffset" softKeyboardType="number" restrict="0-9"/>
						<s:Label text="ft" fontWeight="bold"/>
						<s:Spacer width="130"/>
						<s:Label text="Post Length:  "  fontWeight="bold"/>
						<s:TextInput width="{textInputWidth}" id="postLength" softKeyboardType="number" restrict="0-9"/>
						<s:Label text="ft" fontWeight="bold"/>
						
						
					</s:HGroup>
					<s:HGroup verticalAlign="middle">
						<s:HGroup verticalAlign="middle" id="SConGroup"></s:HGroup>
						<s:Spacer width="100"/>
						<s:HGroup verticalAlign="middle" id="SNoSGroup"></s:HGroup>
					</s:HGroup>
				</s:VGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:VGroup id="Sign" >
			<s:HGroup  verticalAlign="middle" gap="20"  paddingTop="10" paddingLeft="20">
				<s:Label text="Sign #" fontWeight="bold" />
				<s:Spacer width="20"/>
				
				<s:HGroup id="SignTabsHeader" gap="20"/>
				<s:Button label="Select Sign" click="SelectSign_clickHandler()" enabled="{this.numOfSigns>0}" />
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#000000" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Group id="signTabGroup">
				
			</s:Group>
		</s:VGroup>	

		<s:VGroup id="Inspection"  width="100%">
			<s:HGroup  verticalAlign="middle" gap="20"  paddingTop="10" paddingLeft="20">
				<s:Label text="Sign #" fontWeight="bold" />
				<s:Spacer width="20"/>
				<s:HGroup id="SignTabsHeader_insp" gap="20"/>
				<s:Button label="Select Sign" visible="false"/>
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#000000" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Group id="signInspTabGroup" width="100%">
				
			</s:Group>
		</s:VGroup>
		
		<s:VGroup id ="Attachments" >
			<s:HGroup  verticalAlign="middle" gap="20"  paddingTop="10" paddingLeft="20">
				<s:Label text="Sign #" fontWeight="bold" />
				<s:Spacer width="20"/>
				<s:HGroup id="SignTabsHeader_attach" gap="20"/>
				<s:Button label="Select Sign" visible="false" click="SelectSign_clickHandler()"/>
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#000000" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Label text="Attachments"/>
			<s:Group id="signAttachTabGroup">
				
			</s:Group>
			<!--
			<s:Group id ="AttachmentsGroup"  >
				<s:layout>
					<s:TileLayout/>
				</s:layout>
			</s:Group>
			-->
		</s:VGroup>
	</views:CBViewStack>
	<s:HGroup width="100%">
		<s:HGroup horizontalAlign="center" width="100%">
			<s:Button label="Save" click="onSave()" />
			<s:Button label="Close" id="clbtn" click="handleCloseEvent()"/>
		</s:HGroup>
		
		<s:CheckBox label="Retire" id="retireChk" click="retireChk_changeHandler(event)" />
		<s:Button label="Move to Current Location" id="moveBtn"  click="moveBtn_changeHandler(event)" />
	</s:HGroup>
	
	
	
</baseViews:BaseAssetTitleWindow>
