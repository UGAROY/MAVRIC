<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.events.DropDownViewEvent;
			import com.transcendss.mavric.managers.ImageManager;
			import com.transcendss.mavric.managers.ddot.DdotRecordManager;
			import com.transcendss.mavric.util.DropDownViewHoriz;
			import com.transcendss.mavric.views.componentviews.AddAttachments;
			import com.transcendss.mavric.views.ddot.SignSelector;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.rpc.Responder;
			
			import spark.components.Button;
			import spark.skins.mobile.TextInputSkin;
			
			import skins.HeaderlessPanelSkin;
			import skins.TSSSkinnablePopUpContainerSkin;
			
			private var recordManager:DdotRecordManager;
			
			[Bindable]
			private var textInputWidth:Number = 300;
			
			private var signSelectorForm:SignSelector;
			private var linkedSignForm:LinkedSign;
			
			public var signFacingDDView:DropDownViewHoriz = new DropDownViewHoriz();
			public var signSizeDDView:DropDownViewHoriz = new DropDownViewHoriz();
			public var signStatusDDView:DropDownViewHoriz = new DropDownViewHoriz();
			
			private var attchView:AddAttachments = new AddAttachments();
			
			[Bindable]
			public var sign:Object;
			public var isNewSign:Boolean;
			public var currSupportID:Number;
			
			private function init():void
			{
				try
				{	
					recordManager = FlexGlobals.topLevelApplication.GlobalComponents.recordManager;	
					
					signFacingDDView.domainTableIDColName =  "DIRECTION";
					signFacingDDView.fetchDomainValues();
					signFacingDDView.btnText = "Sign Facing";
					signFacingDDView.width_TI = 120;
					signFacingDDView.genericPopup.height = 200;
					signFacingDDView.genericPopup.width = 200;
					SignFacingDDGroup.addElement(signFacingDDView);
					
					signSizeDDView.domainTableIDColName =  "SIGNSIZE";
					signSizeDDView.fetchDomainValues();
					signSizeDDView.btnText = "Sign    Size";
					signSizeDDView.width_TI = 120;
					signSizeDDView.genericPopup.height = 200;
					signSizeDDView.genericPopup.width = 200;
					SignSizeDDGroup.addElement(signSizeDDView);
					
					signStatusDDView.domainTableIDColName =  "SIGNSTATUS";
					signStatusDDView.fetchDomainValues();
					signStatusDDView.btnText = "Sign Status";
					signStatusDDView.width_TI = 120;
					signStatusDDView.genericPopup.height = 200;
					signStatusDDView.genericPopup.width = 200;
					SignStatusDDGroup.addElement(signStatusDDView);
					
					attchView.init("SignInventory",true,true,true);
					addAttchmentsHolder.addElement(attchView);
				}
				catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
				
			}
			
			protected function selectSignBtn_clickHandler(event:MouseEvent):void
			{
				signSelectorForm = PopUpManager.createPopUp(this, SignSelector) as SignSelector;
				(signSelectorForm as SignSelector).signSelectedCallback = signSelectCompleteHandler;
				PopUpManager.centerPopUp(signSelectorForm);
			}
			
			protected function linkedSignBtn_clickHandler(event:MouseEvent):void
			{
//				var routeSignsResp:mx.rpc.Responder = new mx.rpc.Responder(openLinkedSignEditor,  failReqHandler);
//				recordManager.getOtherSignsOnRoute(sign['ROUTEID'], sign['SIGNID'], 9, routeSignsResp);
				var supports:ArrayCollection = recordManager.getAllSupports();
				
				var otherSupportIDs:Array = new Array();
				for each (var support:Object in supports)
				{
					if (support['invProperties'].POLEID.value != currSupportID)
						otherSupportIDs.push(support['invProperties'].POLEID.value);
				}
				
				var routeSignsResp:mx.rpc.Responder = new mx.rpc.Responder(openLinkedSignEditor,  failReqHandler);
				recordManager.getOtherSignsOnRoute(otherSupportIDs, 9, routeSignsResp);
			}
			
			private function openLinkedSignEditor(data:ArrayCollection):void
			{
				linkedSignForm = PopUpManager.createPopUp(this, LinkedSign) as LinkedSign;
				PopUpManager.centerPopUp(linkedSignForm);
				linkedSignForm.currentSign = this.sign;
				linkedSignForm.otherSigns = data;
				linkedSignForm.loadLinkedSignsInfo();
			}
			
			private function failReqHandler(data:Object):void
			{
				FlexGlobals.topLevelApplication.setBusyStatus(false);
				FlexGlobals.topLevelApplication.TSSAlert("Error in obtaining data");
			}
			
			protected function signSelectCompleteHandler(evt:DropDownViewEvent):void
			{
				descriptionTextInut.text = evt.description;
				signCodeTextInut.text = evt.mutcdText;
		
				setSignImage();
			}
			
			protected function setSignImage():void
			{
				var uiCom:UIComponent = new UIComponent();
				var imgManager:ImageManager = new ImageManager();
				
				selSignImgHolder.removeAllElements();
				
				var bmp:Bitmap = imgManager.getById(signCodeTextInut.text);
				if(bmp!=null)
				{
					bmp = imgManager.scaleImage(bmp, selSignImgHolder);
					uiCom.addChild(bmp);
					selSignImgHolder.addElement(uiCom);
				}
			}
			
			public function loadSignInfo():void
			{
				signCodeTextInut.text = sign['SIGNNAME'];
				descriptionTextInut.text = sign['DESCRIPTION'];
				signFacingDDView.domainID = sign['SIGNFACING'];
				signSizeDDView.domainID = sign['SIGNSIZE'];
				signStatusDDView.domainID = sign['SIGNSTATUS'];
				signComments.text = sign['COMMENT'];
				setSignImage();
			}
			
//			public function signValuesbeenChanged():Boolean
//			{
//				return signFacingDDView.domainID != sign['SIGNFACING'] ||
//					signSizeDDView.domainID != sign['SIGNSIZE'] ||
//					signStatusDDView.domainID != sign['SIGNSTATUS'] ||
//					signCodeTextInut.text != sign['SIGNNAME'] ||
//					descriptionTextInut.text != sign['DESCRIPTION'];
//			}
			
			public function updateSignValues():void
			{
				sign['SIGNNAME'] = signCodeTextInut.text;
				sign['DESCRIPTION'] = descriptionTextInut.text;
				sign['SIGNFACING']= signFacingDDView.domainID;
				sign['SIGNSIZE'] = signSizeDDView.domainID;
				sign['SIGNSTATUS'] = signStatusDDView.domainID;
				sign['COMMENT'] = signComments.text;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:VGroup paddingBottom="10" paddingLeft="20" paddingRight="10" paddingTop="10">
		<s:VGroup>
			<s:HGroup>
				<s:VGroup width="60%">
					<s:Button id="selectSignBtn" label="Select Sign By Code"
							  click="selectSignBtn_clickHandler(event)"/>
					<s:Spacer height="5"/>
					<s:HGroup verticalAlign="middle">
						<s:VGroup width="40%">
							<s:Label fontWeight="bold" text="Sign  Code"/>
							<s:TextInput id="signCodeTextInut" width="100%" editable="false"
										 skinClass="spark.skins.mobile.TextInputSkin"/>
						</s:VGroup>
						<s:Spacer width="5%"/>
						<s:VGroup width="40%">
							<s:Label fontWeight="bold" text="Description"/>
							<s:TextInput id="descriptionTextInut" width="100%" editable="false"
										 skinClass="spark.skins.mobile.TextInputSkin"/>
						</s:VGroup>
					</s:HGroup>
					<s:Spacer height="10"/>
					<s:HGroup width="100%">
						<s:VGroup width="50%">
							<s:Spacer height="10"/>
							<s:Group id="SignFacingDDGroup"></s:Group>
							<s:Spacer height="10"/>
							<s:Group id="SignSizeDDGroup"></s:Group>
							<s:Spacer height="10"/>
							<s:Group id="SignStatusDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="20"/>
						<s:VGroup width="50%">
							<s:Label fontWeight="bold" text="Sign Image"/>
							<s:Spacer height="10"/>
							<s:VGroup id="selSignImgHolder" width="180" height="180">
							</s:VGroup>
						</s:VGroup>
					</s:HGroup>
					
				</s:VGroup>
				<s:Spacer width="5%"/>
				<s:VGroup width="20%">
					<s:Label fontWeight="bold" text="Comments:  "/>
					<s:TextArea id="signComments" height="170"/>
					<s:Spacer height="10"/>
					<s:HGroup verticalAlign="middle">
						<s:Label fontWeight="bold" text="Zone ID"/>
						<s:Spacer width="10"/>
						<s:TextInput id="zoneIdTextInut" width="210"
									 skinClass="spark.skins.mobile.TextInputSkin"/>
					</s:HGroup>
					<s:Spacer height="10"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Button id="linkedSignBtn" width="45%" label="Linked Sign"
								  click="linkedSignBtn_clickHandler(event)"/>
						<s:Spacer width="10%"/>
						<s:Button id="timeDayBtn" width="45%" label="Time and Day"/>
					</s:HGroup>
					
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
		
		<s:Spacer height="20"/>
		<s:VGroup id="addAttchmentsHolder" right="0" width="100%" gap="10"/>
	</s:VGroup>
	
</s:Group>