<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" title="Manage Linked Signs"
			   width="750" height="580"
			   close="handleCloseEvent()"
			   creationComplete="init()"
			   skinClass="skins.MavricTitleWindowSkin" xmlns:ddot="com.transcendss.mavric.views.ddot.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.skins.mobile.TextInputSkin;
			
			public var currentSign:Object;
			public var otherSigns:ArrayCollection;
			[Bindable]
			private var currentSignDp:ArrayCollection;
			[Bindable]
			private var otherSignsDp:ArrayCollection;
			
			public var oldLinkID:String = null;
			// A pair of new linkID and old linkID
			private var linkIDPair:Object = new Object();
			private var arrowDirDomainObj:Object;
			public var linkedSignCallback:Function;
			
			//private var signTypes:ArrayCollection;

			private function init():void
			{
				try
				{
					var arrowDirDomain:ArrayCollection = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getDomain("ARROWDIRECTION");
					
					arrowDirDomainObj = domainToObj(arrowDirDomain)
					// signTypes = FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getDomain("SIGNTYPE");
				}
				catch(err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());		
				}
			}
			
			private function domainToObj(domain:ArrayCollection):Object
			{
				var domainObj:Object = new Object();
				for each (var item:Object in domain)
				domainObj[item['ID']] = item['DESCRIPTION'];
				return domainObj;
			}
			
			public function loadLinkedSignsInfo():void
			{
				var oldLinkSigns:Array = new Array();
				if(oldLinkID)
					oldLinkSigns = this.oldLinkID.split("_");
				
				currentSignDp = new ArrayCollection([currentSign]);
				for each(var otherSign:Object in otherSigns)
				{
					if (oldLinkSigns.indexOf(otherSign['SIGNID'].toString())!= -1) 
						otherSign['Linked'] = true;
					else
						otherSign['Linked'] = false;
				}
				otherSignsDp = otherSigns;
			}
			
			private function formatMeasureColumn(item:Object, column:GridColumn):String
			{
				return parseFloat(item[column.dataField]).toFixed(3);
			}
			
			private function descLabelFunc(item:Object, column:GridColumn):String
			{
				return FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getSignDescriptionByMUTCD(item["SIGNCODE"]);
			}
			
			private function formatArrowDirColumn(item:Object, column:GridColumn):String
			{
				return arrowDirDomainObj != null ? arrowDirDomainObj[item[column.dataField]] : "";
			}
			
			protected function handleCloseEvent():void
			{
				PopUpManager.removePopUp(this);
			}
			
			
			protected function SaveHandler(event:MouseEvent):void
			{
				try
				{
					var linkedSignIDs:Array = new Array();
					linkedSignIDs.push(currentSign['SIGNID']);
					for each(var sign:Object in otherSigns)
					{
						if (sign['Linked'])
							linkedSignIDs.push(sign['SIGNID']);
					}
					linkIDPair['NEW'] = linkedSignIDs.join("_");
					linkIDPair['OLD'] = oldLinkID;
					linkIDPair['ZONEID'] = zoneIDText.text;
					if(!linkIDPair['NEW'])//if only zoneid changed
						linkIDPair['NEW'] = linkIDPair['OLD'];
					linkedSignCallback(linkIDPair);
					PopUpManager.removePopUp(this);
				}
				catch(err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert("Please fill out all fields."); //err.getStackTrace()
				}
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout verticalAlign="top"/>
	</s:layout>
	<s:VGroup gap="15" width="100%" horizontalAlign="left" paddingTop="10" paddingLeft="20" paddingRight="20">
		
		<s:Spacer height="10"/>
		<s:Label text="Current Sign:" fontWeight="bold"/>
		<s:DataGrid id="currentSignGrid" 
					width="100%" height="60"
					verticalScrollPolicy="off"
					dataProvider="{currentSignDp}">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="DESCRIPTION" labelFunction="descLabelFunc" headerText="Sign Description"/>
					<s:GridColumn dataField="ARROWDIRECTION" headerText="Arrow Direction" labelFunction="formatArrowDirColumn"/>
					<s:GridColumn dataField="MEASURE" headerText="Measure" labelFunction="formatMeasureColumn"/>
					<s:GridColumn dataField="SUPPORTID" headerText="Support ID"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<s:Label text="Potential Matched Sign:" fontWeight="bold"/>
		<s:DataGrid id="otherSignsGrid" 
					width="100%" height="270"
				    verticalScrollPolicy="auto"
					dataProvider="{otherSignsDp}">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn editable="false" headerText="Linked">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<s:CheckBox selected="@{data.Linked}"/>
								</s:GridItemRenderer>
								
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
					<s:GridColumn dataField="DESCRIPTION" labelFunction="descLabelFunc" headerText="Sign Description"/>
					<s:GridColumn dataField="ARROWDIRECTION" headerText="Arrow Direction" labelFunction="formatArrowDirColumn"/>
					<s:GridColumn dataField="MEASURE" headerText="Measure" labelFunction="formatMeasureColumn">
					</s:GridColumn>
					<s:GridColumn dataField="SUPPORTID" headerText="Support ID"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:Spacer height="10"/>
		<s:VGroup width="100%" horizontalAlign="center" >
			<s:HGroup verticalAlign="middle">
				<s:Label text="Zone ID" fontWeight="bold"/>
				<s:TextInput id= "zoneIDText" editable="true" skinClass="spark.skins.mobile.TextInputSkin" softKeyboardType="{SoftKeyboardType.NUMBER}" restrict = "0-9" width="120"/>
				<s:Spacer width="40"/>
				<s:Button label="Save"  width="100" height="35" click="SaveHandler(event)"/>
				<s:Spacer width="20"/>
				<s:Button label="Cancel" width="100" height="35" click="handleCloseEvent()"/>
			</s:HGroup>
		</s:VGroup>	
	</s:VGroup>	
	
		
</s:TitleWindow>
