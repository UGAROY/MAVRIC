<?xml version="1.0" encoding="utf-8"?>
<baseViews:BaseAssetTitleWindow  xmlns:fx="http://ns.adobe.com/mxml/2009" 
								 xmlns:s="library://ns.adobe.com/flex/spark" title="Support Inventory"
								 width="1030" height="700"
								 close="handleCloseEvent()"
								 creationComplete="init()"
								 skinClass="skins.MavricTitleWindowSkin"
								 xmlns:baseViews="com.transcendss.mavric.views.baseViews.*" xmlns:views="com.transcendss.mavric.views.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ddot="com.transcendss.mavric.views.ddot.*">
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.events.AssetEvent;
			import com.transcendss.mavric.events.DropDownViewEvent;
			import com.transcendss.mavric.events.ddot.GeotagEvent;
			import com.transcendss.mavric.managers.ddot.DdotRecordManager;
			import com.transcendss.mavric.util.DatePickerViewHoriz;
			import com.transcendss.mavric.util.DropDownViewVert;
			import com.transcendss.mavric.views.componentviews.AddAttachments;
			import com.transcendss.transcore.events.CameraEvent;
			import com.transcendss.transcore.events.VoiceEvent;
			import com.transcendss.transcore.events.videoEvent;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			import com.transcendss.transcore.sld.models.components.GeoTag;
			import com.transcendss.transcore.sld.models.managers.GeotagsManager;
			import com.transcendss.transcore.util.AssetSymbol;
			import com.transcendss.transcore.util.Converter;
			import com.transcendss.transcore.util.TSSAudio;
			import com.transcendss.transcore.util.TSSPicture;
			import com.transcendss.transcore.util.TSSVideo;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.rpc.Responder;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.components.VGroup;
			import spark.events.GridEvent;
			import spark.skins.mobile.TextInputSkin;
			
			//private var counter:int = 0;
			private var sdlftx:int;
			private var sdrtx: int;
			private var culvx:int;
			private var sdlfty:int;
			private var sdrty:int;
			private var culvy:int;
			private var leftSprite:AssetSymbol;
			private var rightSprite:AssetSymbol;
			private var bottomSprite:AssetSymbol;
			
			[Bindable]
			private var textInputWidth:Number = 300;
			private var gtManager:GeotagsManager = new GeotagsManager();
			private var locDDView:DropDownViewVert = new DropDownViewVert();
			private var signSupportDDView:DropDownViewVert = new DropDownViewVert();
			private var supportStatusDDView:DropDownViewVert = new DropDownViewVert();
			private var baseTypeDDView:DropDownViewVert = new DropDownViewVert();
			private var numberOfBasesDDView:DropDownViewVert = new DropDownViewVert();
			private var subBaseDDView:DropDownViewVert = new DropDownViewVert();
			private var attchView:AddAttachments = new AddAttachments();
			
			private var startDateView:DatePickerViewHoriz = new DatePickerViewHoriz();
			private var endDateView:DatePickerViewHoriz = new DatePickerViewHoriz();
			
			private var recordManager:DdotRecordManager;
			
			[Bindable]
			private var allAssets:ArrayCollection = new ArrayCollection();
			
			private var currRouteID:String = "";
			private var currMilePost:Number;
			
			private var currSupport:BaseAsset = null;
			private var currSupportID:Number = -1;
			[Bindable]
			private var currSigns:ArrayCollection = new ArrayCollection();
			private var currSignTab:SignTab = null;
			[Bindable]
			private var selectedSign:Object = new Object();
			[Bindable]
			private var currInspections:ArrayCollection = new ArrayCollection();
			private var inspectionDetailsForm:InspectionDetails = null;
			private var currInspectionAsset:Object;
			
			private var currLinkDict:Object = new Object();
			private var currLinkTrDict:Object = new Object();
			
			[Bindable]
			private var dataRetrieved:Boolean = false;
			
			// A variable to store the new Sign ID
			private var newSignID:Number = 0;
			
			private var moveToLat:String="";
			private var moveToLong:String="";
			private var moveToPrec:String="";
			private var moveToRefpt:Number;
			private var assetMoved:Boolean = false;
			
			private function init():void
			{
				try
				{				
					recordManager = FlexGlobals.topLevelApplication.GlobalComponents.recordManager;
					// Build a support POLEID --- ROUTEID/MEASURE dictionary
					// TODO: place it somewhere else
					//recordManager.buildSupportDict();
					
					locDDView.domainTableIDColName =  "LOCATION";
					locDDView.fetchDomainValues();
					locDDView.btnText = "Location";
					locDDView.genericPopup.height = 200;
					LocDDGroup.addElement(locDDView);
					
					signSupportDDView.domainTableIDColName =  "SUPPORTTYPE";
					signSupportDDView.fetchDomainValues();
					signSupportDDView.btnText = "Support Type";
					signSupportDDView.genericPopup.height = 200;
					SignSupportDDGroup.addElement(signSupportDDView);
					
					supportStatusDDView.domainTableIDColName =  "SUPPORTSTATUS";
					supportStatusDDView.fetchDomainValues();
					supportStatusDDView.btnText = "Support Status";
					supportStatusDDView.genericPopup.height = 200;
					supportStatusDDView.customCPEvent = new DropDownViewEvent( DropDownViewEvent.CUSBUTFUNCEVENT);
					supportStatusDDView.customCPCallback =this.retireChk_changeHandler;
					SignStatusDDGroup.addElement(supportStatusDDView);
					
					baseTypeDDView.domainTableIDColName =  "BASETYPE";
					baseTypeDDView.fetchDomainValues();
					baseTypeDDView.btnText = "Base Type";
					baseTypeDDView.genericPopup.height = 200;
					BaseTypeDDGroup.addElement(baseTypeDDView);
					
					numberOfBasesDDView.domainTableIDColName =  "NUMBEROFBASES";
					numberOfBasesDDView.fetchDomainValues();
					numberOfBasesDDView.btnText = "Number of Bases";
					numberOfBasesDDView.genericPopup.height = 200;
					NoOfBasesDDGroup.addElement(numberOfBasesDDView);
					
					subBaseDDView.domainTableIDColName =  "SUBBASE";
					subBaseDDView.fetchDomainValues();
					subBaseDDView.btnText = "Sub Base";
					subBaseDDView.genericPopup.height = 200;
					SubBaseDDGroup.addElement(subBaseDDView);
					
					startDateView.btnText = "MS Start Date";
					startDateView.enabled = false;
					startDateView.width_TI = 120;
					MsStartDateGroup.addElement(startDateView);
					endDateView.btnText = "MS End Date";
					endDateView.enabled = false;
					endDateView.width_TI = 120;
					MsEndDateGroup.addElement(endDateView);
					
					
					attchView.init("SupportInventory",true,false,true);
					addAttchmentsHolder.addElement(attchView);
					
					var eve:AssetEvent = new AssetEvent(AssetEvent.CULVERTFORMLOADED);
					dispatchEvent(eve);
					
				}
				catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
				
			}
			
			
			private function onSave():void
			{
				// Save the signs
				keepValuesInCurrSignTab(); // Keep the values of current sign tab. The workflow here is not very straightforward, but anyway...
				
				// Pre-processing
				// If it is a newly added support, then it will be assigned a new ID
				// We need to get the updated Support ID and update the poleid in signs and inspections
				if (currSupportID == -1)
				{
					var updatedSupportID:Number = recordManager.getUpdatedSupportID(currSupport);
					updateSupportID(updatedSupportID);
				}
				
				// Save the support
				saveSupport();
				
				if(!this.retireChk.selected) // Don't save other recrods if the support is marked as retried.
				{
					// Save the signs
					recordManager.saveSigns(currSigns);
					
					// Save the inspections
					recordManager.saveInspections(currInspections);
					
					// Save the links
					recordManager.saveLink(currLinkDict);
					
					// Save the time restrictions
					recordManager.saveTimeRestriction(currLinkTrDict);
				}
				
				PopUpManager.removePopUp(this);
				
			}
			
			private function saveSupport():void
			{
				if(supportStatusDDView.domainID=="5")
				{
					currSupport['invProperties'].RETIRED.value=1;
					currSupport['invProperties'].SUPPORTSTATUS.value = supportStatusDDView.domainID;
				}
				else
				{
					currSupport['invProperties'].ROUTEID.value = this.currRouteID;
					currSupport['invProperties'].MEASURE.value = this.currMilePost;
					currSupport['invProperties'].LOCATION.value = locDDView.domainID;
					currSupport['invProperties'].SUPPORTTYPE.value = signSupportDDView.domainID;
					currSupport['invProperties'].SUPPORTSTATUS.value = supportStatusDDView.domainID;
					currSupport['invProperties'].BASETYPE.value = baseTypeDDView.domainID;
					currSupport['invProperties'].NUMBEROFBASES.value = numberOfBasesDDView.domainID;
					currSupport['invProperties'].SUBBASE.value = subBaseDDView.domainID;
					currSupport['invProperties'].SUPPORTHEIGHT.value = PoleHeightTextInut.text;
					currSupport['invProperties'].COMMENTS.value =  Converter.convertStringToURI(PoleComments.text);
					currSupport['invProperties'].MSUTILITYID.value = MsUtilityTextInut.text;
					currSupport['invProperties'].MSSTARTDATE.value = startDateView.text;
					currSupport['invProperties'].MSENDDATE.value = endDateView.text;
					
					if(assetMoved)
						currSupport.setAssetLocation("LATITUDE","LONGITUDE", this.moveToRefpt, this.moveToLat, this.moveToLong, this.moveToPrec);
				}
				
				var supportEvent:AssetEvent = new AssetEvent(AssetEvent.NEWCULVERT , true, true);
				supportEvent.geoTags = geoTagsArr;
				supportEvent.culvert = currSupport;
				dispatchEvent(supportEvent);
			}
			
			public function updateSupportID(supportID:Number):void
			{
				// update the newly assigned support id based on the return asset
				for each(var sign:Object in currSigns)
					sign['SUPPORTID'] = supportID;
				for each(var inspection:Object in currInspections)
					inspection['SUPPORTID'] = supportID;
				for each(var geotag:GeoTag in geoTagsArr)
					geotag.asset_base_id = "" + supportID;
			}
			
			public override function setBaseAsset(baseAsst:BaseAsset):void
			{
				currSupport = baseAsst;
				currSupportID = currSupport.id;
				
				if (currSupportID == -1)
				{
					this.currRouteID = FlexGlobals.topLevelApplication.currentRouteName;
					this.currMilePost = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					if (!currSupport['invProperties'].SUPPORTSTATUS.value)
						currSupport['invProperties'].SUPPORTSTATUS.value = 1;
					//set lat long from GPS if new GR
					currSupport.setAssetLocation("LATITUDE","LONGITUDE");
				}
				else 
				{
					this.currRouteID = currSupport['invProperties'].ROUTEID.value || "";
					this.currMilePost = parseFloat(currSupport['invProperties'].MEASURE.value || "");
				}
				
				supportRouteIdInput.text = FlexGlobals.topLevelApplication.GlobalComponents.stkDiagram.route.routeFullName || this.currRouteID;
				milepostTextInut.text = this.currMilePost.toFixed(3);
				locDDView.domainID = currSupport['invProperties'].LOCATION.value || "";
				signSupportDDView.domainID = currSupport['invProperties'].SUPPORTTYPE.value || "";
				supportStatusDDView.domainID = currSupport['invProperties'].SUPPORTSTATUS.value || "";
				baseTypeDDView.domainID = currSupport['invProperties'].BASETYPE.value || "";
				numberOfBasesDDView.domainID = currSupport['invProperties'].NUMBEROFBASES.value || "";
				subBaseDDView.domainID = currSupport['invProperties'].SUBBASE.value || "";
				PoleHeightTextInut.text = currSupport['invProperties'].SUPPORTHEIGHT.value || "";
				PoleComments.text =  Converter.convertURIToString((currSupport['invProperties'].COMMENTS.value == null || currSupport['invProperties'].COMMENTS.value == "<Null>") ?  " " : currSupport['invProperties'].COMMENTS.value);
				MsUtilityTextInut.text = currSupport['invProperties'].MSUTILITYID.value || "";
				startDateView.value = currSupport['invProperties'].MSSTARTDATE.value != null ? new Date(currSupport['invProperties'].MSSTARTDATE.value) : null;
				endDateView.value = currSupport['invProperties'].MSENDDATE.value != null ? new Date(currSupport['invProperties'].MSENDDATE.value) : null;
				
				if (currSupportID != -1)
				{
					// Get the Signs
					//var signResp:mx.rpc.Responder = new mx.rpc.Responder(signReqReponse,  failReqHandler);
					//recordManager.getSigns(currSupportID, signResp);
					var signObj:Object = recordManager.getSignsByPoleID(currSupportID);
					currSigns = signObj.signs;
					currSigns.source.sortOn("SIGNORDER", [ Array.NUMERIC]);
					currInspections = recordManager.getInspectionsForAsset(currSupportID, signObj.signIDs);
					var gtArray:Array = recordManager.getGeotags(currSupportID);
					
					for (var gti:int=0;gti<gtArray.length;gti++)
					{
						var tmpMedia:Object = new Object();
						var tmpGT:GeoTag = gtArray[gti] as GeoTag;	
						//tmpGT.asset_ty_id = currentSign.assetType;
						var gtURL:String= FlexGlobals.topLevelApplication.GlobalComponents.ConfigManager.geotagUrl;
						var viE:* = new GeotagsManager().ConvertGeotags(tmpGT,File.applicationStorageDirectory.resolvePath(gtURL).url+"/","local");
						if(viE)
						{
							var vContainer:VGroup = new VGroup();
							vContainer.horizontalAlign = "center";
							var assetLabel:Label = new Label();
							assetLabel.text = (tmpGT.asset_ty_id =="SIGN")?"Sign":(tmpGT.asset_ty_id =="POLE")? FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getAssetUINameByType("1"): FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getAssetUINameByType(tmpGT.asset_ty_id);
							assetLabel.text +=	tmpGT.local_asset_id == "" ? " -- "+  tmpGT.local_asset_id : "";
							vContainer.addElement(viE);
							vContainer.addElement(assetLabel);
//							if(viE is TSSPicture)
//								picArray.addItem(viE);
							if (tmpGT.is_insp == 0)
							{
								InvAttachments.addElement(vContainer);
							}
							else
							{
								InspAttachments.addElement(vContainer);
							}
						}
						tmpMedia.geoTag = tmpGT;
						tmpMedia.geoLocalId = tmpGT.id;
					}
					
					getGeotags(String(currSupport.invProperties["OBJECTID"].value),InvAttachments, FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getEventLayerID(baseAsst.description),
						Number(baseAsst.invProperties[baseAsst.fromMeasureColName].value));
					dataRetrieved = true;
				}
				else 
				{
					// If a new Support. directly set the dataRetrieved to true
					dataRetrieved = true;
				}
				
				if(currSupport.invProperties["RETIRED"].value==1)
				{
					this.retireChk.selected = true;
					this.retireOkay(true);					
				}
				setMilePostDiagram(currSupport.invProperties[currSupport.fromMeasureColName].value?Number(currSupport.invProperties[currSupport.fromMeasureColName].value):FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP());
				
			}
			
			private function setMilePostDiagram(cmp:Number):void
			{
				//var cmp:Number =!(milepost==-1)?milepost:FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
				var mileposts:Object = binarySearch(cmp);
				
				var llabel:TextField = new TextField();
				
				var lmp:Number;
				var rmp:Number;
				
				
				var lintname:String="";
				var rintname:String="";
				
				var offset:Number=0;
				var offsetRouteName:String ="";
				
				
				if(mileposts.leftPost != null && mileposts.rightPost != null)
				{
				
					lmp = mileposts.leftPost.invProperties[mileposts.leftPost.fromMeasureColName].value;
					rmp =  mileposts.rightPost.invProperties[mileposts.rightPost.fromMeasureColName].value;
					
					
					lintname  = mileposts.leftPost.invProperties["INTERSECTIONNAME"].value;
					rintname =  mileposts.rightPost.invProperties["INTERSECTIONNAME"].value;
					
					
					if(cmp-lmp>rmp-cmp)
					{
						offset = cmp-rmp;
						offsetRouteName = rintname;
					}
					else
					{
						offset = cmp-lmp;
						offsetRouteName = lintname;
					}
					
					
					
				}
				else if(mileposts.leftPost != null)
				{
					lmp = mileposts.leftPost.invProperties[mileposts.leftPost.fromMeasureColName].value;
					
					lintname  = mileposts.leftPost.invProperties["INTERSECTIONNAME"].value;
					offset = cmp-lmp;
					offsetRouteName = lintname;
					
				}
				else if(mileposts.rightPost != null)
				{
					rmp =  mileposts.rightPost.invProperties[mileposts.rightPost.fromMeasureColName].value;
					rintname =  mileposts.rightPost.invProperties["INTERSECTIONNAME"].value;
					offset = cmp-rmp;
					offsetRouteName = rintname;
					
				}
				else
				{
					trace("You have no nearby reference points");
				}
				
				offsetTextInut.text = offset.toFixed(3);
				offsetStreetTextInut.text = offsetRouteName;
				
			}
			
			private function binarySearch(target:Number):Object
			{
				var array:ArrayCollection = recordManager.allIntersections;
				array.source.sortOn("milePost", Array.NUMERIC);
				var left:int = 0;
				var right:int = array.length - 1;
				var middle:int;
				if(array == null || array.length == 0)
					return {leftPost:null, rightPost:null};
				if(target <  new Number(array[left].invProperties[array[left].fromMeasureColName].value))
					return {leftPost:null, rightPost:array[left]};
				if(target >  new Number(array[right].invProperties[array[right].fromMeasureColName].value))
					return {leftPost:array[right], rightPost:null};
				while(left < right - 1)
				{
					middle = (left + right)/2;
					if(target == new Number(array[middle].invProperties[array[middle].fromMeasureColName].value))
						return {leftPost:array[left], rightPost:array[right]};
					else if(target < new Number(array[middle].invProperties[array[middle].fromMeasureColName].value))
						right  = middle;
					else
						left = middle;
				}
				
				return {leftPost:array[left], rightPost:array[right]};
			}
			
			private function getGeotags( assetID:String, attachmentGroup:Group, layer:Number, fromMeasure:Number):void
			{
				if(FlexGlobals.topLevelApplication.connected)
					{
						FlexGlobals.topLevelApplication.incrementEventStack();
//						var httpServ:HTTPService = new HTTPService();
//						httpServ.method = "GET";
//						httpServ.resultFormat = "text";
//						httpServ.addEventListener( FaultEvent.FAULT, assetGTFaultHandler);
//						
//						httpServ.url = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(String(layer) ,assetID);
//						httpServ.addEventListener( ResultEvent.RESULT, function(event:ResultEvent):void{
//							var attachments:Object = JSON.parse(event.result as String);
//							
//							
//							gtManager.setGeotags(
//								attachmentGroup,
//								attachments.attachmentInfos as Array,
//								currSupport.assetType,
//								assetID,
//								currSupport.routeName,
//								fromMeasure,
//								"",
//								0,String(layer));
//						});
//						
//						
//						httpServ.send();
						
						
						var gtReq:GeotagEvent = new GeotagEvent(GeotagEvent.GEOTAG_REQUEST,currSupport.assetType,String(currSupport.id),false, String(layer), fromMeasure);
						
						gtReq.serviceURL = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(String(layer) ,assetID);
						dispatchEvent(gtReq);
						
						
						//get signs for this support
						
						var signEventLayer:int = FlexGlobals.topLevelApplication.GlobalComponents.recordManager.signEventLayerID;
						//get attachments for this sign
						for each(var sign:Object in this.currSigns)
						{
							
							FlexGlobals.topLevelApplication.incrementEventStack();

							var gtReq2:GeotagEvent = new GeotagEvent(GeotagEvent.GEOTAG_REQUEST,'SIGN',String(sign['SIGNID']),false, String(signEventLayer), fromMeasure);
							
							gtReq2.serviceURL = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(String(signEventLayer) ,String(sign['OBJECTID']));
							dispatchEvent(gtReq2);
						}
						
						var inspEventLayer:int = FlexGlobals.topLevelApplication.GlobalComponents.recordManager.inspectionEventLayerID;
						//get attachments for this sign
						for each(var inspection:Object in this.currInspections)
						{
							
							FlexGlobals.topLevelApplication.incrementEventStack();
//							var httpServ3:HTTPService = new HTTPService();
//							httpServ3.method = "GET";
//							httpServ3.resultFormat = "text";
//							httpServ3.addEventListener( FaultEvent.FAULT, assetGTFaultHandler);
//							
//							httpServ3.url = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(String(inspEventLayer) ,String(inspection['OBJECTID']));
//							httpServ3.addEventListener( ResultEvent.RESULT, function(event:ResultEvent ):void{
//								event.stopPropagation();
//								var attachments:Object = JSON.parse(event.result as String);
//								
//								gtManager.setGeotags(
//									attachmentGroup,
//									attachments.attachmentInfos as Array,
//									inspection.SIGNID!=null? "SIGN":currSupport.assetType,
//									inspection.SIGNID!=null?inspection.SIGNID:inspection.POLEID,
//									currSupport.routeName,
//									fromMeasure,
//									"",
//									0,String(inspEventLayer), InspAttachments);
//							});
//							
//							httpServ3.send();
							
							
							var gtReq3:GeotagEvent = new GeotagEvent(GeotagEvent.GEOTAG_REQUEST,inspection.SIGNID!=null? "SIGN":currSupport.assetType,inspection.SIGNID!=null?inspection.SIGNID:inspection.SUPPORTID,true, String(inspEventLayer), fromMeasure);
							
							gtReq3.serviceURL = FlexGlobals.topLevelApplication.GlobalComponents.agsManager.getAttachmentsUrl(String(inspEventLayer) ,String(inspection['OBJECTID']));
							dispatchEvent(gtReq3);
						}
					}
			}
			
			public  function setGeotag( event:GeotagEvent):void{
				event.stopPropagation();
				var attachments:Object = event.result;
				
				gtManager.setGeotags(
					event.isInsp?InspAttachments:InvAttachments,
					attachments.attachmentInfos as Array,
					event.assetType,
					event.assetId,
					currSupport.routeName,
					event.fromMeasure,
					"",
					0,event.layerId);
			}
			private function failReqHandler():void
			{
				FlexGlobals.topLevelApplication.setBusyStatus(false);
				FlexGlobals.topLevelApplication.TSSAlert("Error in obtaining data");
			}
			
			public  override function handleCloseEvent(event:Event = null):void 
			{
				this.currSupport.symbol.deselectAsset();
				PopUpManager.removePopUp(this);
				
			}
			
			protected function retireChk_changeHandler(event:Event):void
			{
				
				this.retireChk.selected = (supportStatusDDView.domainID=="5");
				
					
				if(this.retireChk.selected)
				{	
					var _retireResp:mx.rpc.Responder = new mx.rpc.Responder(retireOkay, fault);
					
					FlexGlobals.topLevelApplication.YesNoPrompt("Are you sure you want to retire this record? All the local changes made to the asset will be discarded on retirement.", "Retire Asset Confirmation", _retireResp);
					
					
					function fault(data:Object):void
					{	
						FlexGlobals.topLevelApplication.TSSAlert("Error in Opening Retire Confirmation Dialog.");
					}
					
				}
			}
			protected function retireOkay(data:Object):void
			{
				if(data == true)
				{
					for (var forIndex:int = 0; forIndex < viewStack.numChildren; forIndex++)
					{
						var curr:DisplayObject = viewStack.getChildAt(forIndex);
						if (curr is UIComponent)
						{
							var curr2:UIComponent = curr as UIComponent;
							curr2.enabled = false;
						}
					}
				}
			}
			
			protected function moveBtn_changeHandler(event:Event):void
			{
				moveToLat=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Lat;
				moveToLong=FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Long;
				moveToPrec =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.captureBar.Precision;
				moveToRefpt = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
				assetMoved = true;
			}
			
			
			//--------------------------------Sign Tab-------------------------------------------------
			protected function targetSignBtn_clickHandler(event:MouseEvent):void
			{
//				if (currSignTab != null && currSignTab.signValuesbeenChanged())
//				{
//					var msg:String = "The current sign has been edited, do you want to keep the changes?";
//					var resp:mx.rpc.Responder = new mx.rpc.Responder(updateSelectedSignValues, openSignPop);
//					FlexGlobals.topLevelApplication.YesNoPrompt(msg, "Warning", resp);
//				} 
				keepValuesInCurrSignTab();
				openSignPop();
				
				// Click the current selected item to make sure the item can be clicked more than once
				SignList.selectedItem = null;
				SignList.validateDisplayList();
			}
			
			protected function keepValuesInCurrSignTab():void
			{
				if (currSignTab != null)
				{
					// Update the values before switching to another sign
					currSignTab.updateSignValues();
					// If it is a new sign, push it to the currSign list
					if (currSignTab.isNewSign)
					{
						currSigns.addItem(selectedSign);
						currSignTab.isNewSign = false;
					}
					// add link
					if (currSignTab.linkSignPair != null)
						currLinkDict[currSignTab.sign['SIGNID']] = currSignTab.linkSignPair;	
					// add timerestriction
					if (currSignTab.linkTimeRestrictions != null && currSignTab.linkTimeRestrictions.length >0)
						currLinkTrDict[currSignTab.linkSignPair['NEW']] = currSignTab.linkTimeRestrictions;
				}
			}
			
			protected function newSignBtn_clickHandler(event:MouseEvent):void
			{
				signPopUp.close(true);
				
				selectedSign = recordManager.createNewSign(currSupportID);
				selectedSign['MEASURE']  = this.currMilePost;
				selectedSign['SIGNSTATUS'] = 1;
				loadSelectedSign(true);
			}
			
			protected function openSignPop(data:Object=null):void
			{
				signPopUp.open(this,false);
				PopUpManager.centerPopUp(signPopUp);
			}
			
			protected function closeSignPop(event:Event):void
			{
				signPopUp.close(true, SignList.selectedItem);
				
				selectedSign = SignList.selectedItem;				
				loadSelectedSign(false);
			}
			
			private function loadSelectedSign(isNewSign:Boolean):void
			{
				// Clear all the previous sign info
				SignTabGroup.removeAllElements();
				
				currSignTab = new SignTab();
				SignTabGroup.addElement(currSignTab);
				
				// Load the sign info
				currSignTab.sign = selectedSign;
				
				currSignTab.isNewSign = isNewSign;
				currSignTab.currSupportID = currSupportID;
				currSignTab.loadSignInfo();
			}
			
			//-----------------------------------------------------------------------------------------
			
			//------------------------Inspection Tab--------------------------------------------------
			private function getAllAssets():void
			{
				// Clear old data
				allAssets.removeAll();
				
				// Build the allAssets variable
				allAssets.addItem({SUPPORTID: currSupportID, SIGNID: null});
				for each(var item:Object in currSigns)
				{
					allAssets.addItem({SIGNID: item['SIGNID'],SIGNCODE: item['SIGNCODE'], SUPPORTID: null});
				}
			}
			
			protected function newInspectionBtn_clickHandler(event:MouseEvent):void
			{
				// To make sure we get the newly added sign if switch from a newly added sign tab to inspection tab
				// As I mentioned earlier, the ui for adding the new sign cannot really have a clean workflow for adding signs
				// Another solution will be listening to the indexChange Event on the cbStackView
				keepValuesInCurrSignTab();
				
				getAllAssets();
				
				assetPopUp.open(this,false);
				PopUpManager.centerPopUp(assetPopUp);
			}
			
			protected function closeAssetPop(event:Event):void
			{
				assetPopUp.close(true, AssetList.selectedItem);
				openInspectionEditor();
				
				// Create a new inspection object
				inspectionDetailsForm.isNewInspection = true;
				inspectionDetailsForm.inspection = recordManager.createNewInspection(AssetList.selectedItem['SUPPORTID'], AssetList.selectedItem['SIGNID']);
			
				// Get the current inspection asset id 
				this.currInspectionAsset = AssetList.selectedItem;
			}
			
			private function inspHistoryGrid_gridClickHandler(event:GridEvent):void
			{
				if (event.item != null)
				{
					openInspectionEditor();
					
					// Load the current inspection
					inspectionDetailsForm.isNewInspection = false;
					inspectionDetailsForm.inspection = event.item;
					inspectionDetailsForm.loadInspectionInfo();
					
					// Get the current inspection asset id 
					this.currInspectionAsset = event.item;
				}
			}
			
			private function openInspectionEditor():void
			{
				inspectionDetailsForm = new InspectionDetails();
				inspectionDetailsForm = PopUpManager.createPopUp(this, InspectionDetails) as InspectionDetails;
				inspectionDetailsForm.inspectionEditedCallback = inspectionEditedCompleteHandler;
				PopUpManager.centerPopUp(inspectionDetailsForm);
			}
			
			private function inspectionEditedCompleteHandler(inspection:Object, isNewInspection:Boolean):void
			{
				if (isNewInspection)
					currInspections.addItem(inspection);
				else
					currInspections.refresh();
			}
			
			private function assetLabelFunction(item:Object):String
			{
				return item['SIGNID'] == null ? "Support" : "Sign -- " +  FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getSignDescriptionByMUTCD(item["SIGNCODE"]) ;
			}
			
			private function formatAssetLabelColumn(item:Object, column:GridColumn):String
			{
				if (item['SUPPORTID'] != null && item['SUPPORTID'] != 0 && item['SIGNID'] == null)
					return "Support";
				else
				{
					for each(var sign:Object in currSigns)
					{
						if (sign['SIGNID'] == item['SIGNID'])
							return "Sign -- "+ FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getSignDescriptionByMUTCD(sign["SIGNCODE"]);
					}					
				}
				return "";
			}
			
			private function formatAssetTypeColumn(item:Object, column:GridColumn):String
			{
				if (item['SUPPORTID'] != null && item['SUPPORTID'] != 0 && item['SIGNID'] == null)
					return "Support";
				else
				{
//					for each(var sign:Object in currSigns)
//					{
//						if (sign['SIGNID'] == item['SIGNID'])
//							return "Sign -- "+ FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getSignDescriptionByMUTCD(sign["SIGNCODE"]);
//					}	
					
					return "Sign";
				}
				return "";
			}
			
			private function formatInspectionDateColumn(item:Object, column:GridColumn):String
			{
				return InspectionDateDisplay.format(item[column.dataField]);
			}
			//----------------------------------------------------------------------------------------
			
			
			//-----------------------------GeoTags----------------------------------------------------
			public override function handlePicture(event:CameraEvent):void
			{
				event.stopImmediatePropagation();
				
					var assetBaseID:String = "";
					var assetLabelText:String = "";
					var localAssetID:String = "";
					var assetTypeID:String = "";
					var isInsp:int = 0;
					var attachContainer:Group;
					
					var captureSource:String = FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource;
					if(captureSource == "SupportInventory")
					{
						assetBaseID = "" + this.currSupportID;
						localAssetID = "" + this.currSupportID;
						assetTypeID = currSupport!=null ? currSupport.assetType:"1";
						assetLabelText = "Support -- " + localAssetID;
						attachContainer = InvAttachments;
						isInsp = 0;
					}
					else if (captureSource == "SignInventory")
					{
						assetBaseID = "" + this.currSupportID;
						localAssetID = "" + this.currSignTab.sign['SIGNID'];
						assetTypeID = "SIGN";
						assetLabelText = "Sign -- " + localAssetID;
						attachContainer = InvAttachments;
						isInsp = 0;
					} 
					else if (captureSource == "InspectionDetails")
					{
						assetBaseID = "" + this.currSupportID;
						if (this.currInspectionAsset['SUPPORTID'] != null)
						{
							localAssetID = "" + currInspectionAsset['SUPPORTID'];
							assetLabelText = "Pole -- " + localAssetID;
							assetTypeID = "POLE";
						}
						else
						{
							localAssetID = "" + currInspectionAsset['SIGNID'];
							assetLabelText = "Sign -- " + localAssetID;
							assetTypeID = "SIGN";
						}
						
						attachContainer = InspAttachments;
						isInsp = 1;
					}
					
					var bmp:Bitmap = event.bitmap;
					var tmpImage:TSSPicture = new TSSPicture();
					tmpImage.source = bmp; //icon is now the captured image itself
					tmpImage.bitmap = bmp;
					tmpImage.width = 40;//120;
					tmpImage.height = 40;//120;
					
					var fileName:String = new Date().time + ".png";
					var tmpGT:GeoTag = new GeoTag();
					tmpGT.cached_route_id = supportRouteIdInput.text;
					tmpGT.begin_mile_point = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					tmpGT.end_mile_point = 0;
					tmpGT.image_file_name = fileName;
					tmpGT.text_memo = event.memo;
					
					tmpGT.asset_base_id = assetBaseID;
					tmpGT.local_asset_id = localAssetID;
					tmpGT.is_insp = isInsp;
					tmpGT.asset_ty_id = assetTypeID;;
					
					geoTagsArr.addItem(tmpGT);
					tmpImage.geoTag = tmpGT;
					
					attachContainer.addElement(tmpImage);
				
				try
				{
					FlexGlobals.topLevelApplication.setBusyStatus(true);
					fileUtility.WritePicture(fileName, bmp);
					FlexGlobals.topLevelApplication.setBusyStatus(false);
				} catch (er:Error)
				{
					FlexGlobals.topLevelApplication.setBusyStatus(false);
					FlexGlobals.topLevelApplication.TSSAlert(er.message);
				}
			}
			
			//function to handle VideoEvent
			public override function handleVideo(event:videoEvent):void{
				event.stopImmediatePropagation();
				
					var assetBaseID:String = "";
					var assetLabelText:String = "";
					var localAssetID:String = "";
					var assetTypeID:String = "";
					var isInsp:int = 0;
					var attachContainer:Group;
					
					var captureSource:String = FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource;
					if(captureSource == "SupportInventory")
					{
						assetBaseID = "" + this.currSupportID;
						localAssetID = "" + this.currSupportID;
						assetTypeID = currSupport!=null ? currSupport.assetType:"1";
						assetLabelText = "Support -- " + localAssetID;
						attachContainer = InvAttachments;
						isInsp = 0;
					}
					else if (captureSource == "SignInventory")
					{
						assetBaseID = "" + this.currSupportID;
						localAssetID = "" + this.currSignTab.sign['SIGNID'];
						assetTypeID = "SIGN";
						assetLabelText = "Sign -- " + localAssetID;
						attachContainer = InvAttachments;
						isInsp = 0;
					} 
					else if (captureSource == "InspectionDetails")
					{
						assetBaseID = "" + this.currSupportID;
						if (this.currInspectionAsset['SUPPORTID'] != null)
						{
							localAssetID = "" + currInspectionAsset['SUPPORTID'];
							assetLabelText = "Support -- " + localAssetID;
							assetTypeID = currSupport!=null ? currSupport.assetType:"1";
						}
						else
						{
							localAssetID = "" + currInspectionAsset['SIGNID'];
							assetLabelText = "Sign -- " + localAssetID;
							assetTypeID = "SIGN";
						}
						
						attachContainer = InspAttachments;
						isInsp = 1;
					}
					
					var vid:TSSVideo =new TSSVideo();
					vid.source=gtManager.video;
					vid.video=event.video;
					vid.width=40;
					vid.height=40;
					
					var fileName:String = new Date().time + ".3gp";
					vid.filePath = fileName;
					var tmpGT:GeoTag = new GeoTag();
					tmpGT.cached_route_id = supportRouteIdInput.text;
					tmpGT.begin_mile_point = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					tmpGT.end_mile_point = 0;
					tmpGT.video_file_name = fileName;
					tmpGT.text_memo = event.memo;
					
					tmpGT.asset_base_id = assetBaseID;
					tmpGT.local_asset_id = localAssetID;
					tmpGT.is_insp = isInsp;
					tmpGT.asset_ty_id = assetTypeID;;
					
					geoTagsArr.addItem(tmpGT);
					vid.geoTag = tmpGT;
					
					attachContainer.addElement(vid);
				
				try
				{
					FlexGlobals.topLevelApplication.setBusyStatus(true);
					fileUtility.WriteVideo(vid.video, fileName, event.path);
					FlexGlobals.topLevelApplication.setBusyStatus(false);
				} catch (er:Error)
				{
					FlexGlobals.topLevelApplication.setBusyStatus(false);
					FlexGlobals.topLevelApplication.TSSAlert(er.message);
				}
				
			}		
			
			public override function handleVoiceMemo(event:VoiceEvent):void
			{
				event.stopImmediatePropagation();
				
				var assetBaseID:String = "";
				var assetLabelText:String = "";
				var localAssetID:String = "";
				var assetTypeID:String = "";
				var isInsp:int = 0;
				var attachContainer:Group;
				
				var captureSource:String = FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource;
				if(captureSource == "SupportInventory")
				{
					assetBaseID = "" + this.currSupportID;
					localAssetID = ""+ this.currSupportID;
					assetTypeID = currSupport!=null ? currSupport.assetType:"1";
					assetLabelText = "Support";
					attachContainer = InvAttachments;
					isInsp = 0;
				}
				else if (captureSource == "SignInventory")
				{
					assetBaseID = "" + this.currSupportID;
					localAssetID = "" + this.currSignTab.sign['SIGNID'];
					assetTypeID = "SIGN";
					assetLabelText = "Sign -- " + localAssetID;
					attachContainer = InvAttachments;
					isInsp = 0;
				} 
				else if (captureSource == "InspectionDetails")
				{
					assetBaseID = "" + this.currSupportID;
					if (this.currInspectionAsset['SUPPORTID'] != null)
					{
						localAssetID = ""+ currInspectionAsset['SUPPORTID'];
						assetLabelText = "Support";
						assetTypeID = "1";
					}
					else
					{
						localAssetID = "" + currInspectionAsset['SIGNID'];
						assetLabelText = "Sign -- " + localAssetID;
						assetTypeID = "SIGN";
					}
						
					
					attachContainer = InspAttachments;
					isInsp = 1;
				}
				
				var soundBytes:ByteArray=event.byteArray;
				var tmpImage:TSSAudio = new TSSAudio();
				tmpImage.source = gtManager.voice;
				tmpImage.soundBytes = event.byteArray;
				tmpImage.width = 40;
				tmpImage.height = 40;
				var fileName:String = new Date().time +".wav";
				var tmpGT:GeoTag = new GeoTag();
				tmpGT.cached_route_id = supportRouteIdInput.text;
				tmpGT.asset_base_id = assetBaseID;
				tmpGT.begin_mile_point = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					
				tmpGT.end_mile_point = 0;
				tmpGT.image_file_name = "";
				tmpGT.voice_file_name= fileName;
				tmpGT.video_file_name="";
				tmpGT.image_file_name="";
				tmpGT.text_memo = "";
				
				tmpGT.local_asset_id = localAssetID;
				tmpGT.is_insp = isInsp;
				tmpGT.asset_ty_id = assetTypeID;
					
				geoTagsArr.addItem(tmpGT);
				tmpImage.geoTag = tmpGT;
				
				var vContainer:VGroup = new VGroup();
				vContainer.horizontalAlign = "center";
				var assetLabel:Label = new Label();
				assetLabel.text = assetLabelText
				vContainer.addElement(tmpImage);
				vContainer.addElement(assetLabel);
				tmpImage.voiceGroup = vContainer;
				attachContainer.addElement(vContainer);
					
				try{
					FlexGlobals.topLevelApplication.setBusyStatus(true);
					fileUtility.saveToWAV(event.byteArray, fileName);
					FlexGlobals.topLevelApplication.setBusyStatus(false);
				}
				catch(e:Error){
					FlexGlobals.topLevelApplication.setBusyStatus(false);
					FlexGlobals.topLevelApplication.TSSAlert(e.message);
				}
			}	
			
		
			private function signLabelFunc(item:Object):String
			{
				var label:String = item["SIGNID"] + " - " + FlexGlobals.topLevelApplication.GlobalComponents.assetManager.getSignDescriptionByMUTCD(item["SIGNCODE"]) ;
				if(item["SIGNORDER"])
					label +=  " - " +item["SIGNORDER"];
				return label;
			}
			
			public override function removeGeoTag(tssmedia:Object):void
			{
				var elm:IVisualElement = tssmedia as IVisualElement;
				if(InvAttachments.containsElement(elm))
				{
					if(elm is TSSAudio)
						InvAttachments.removeElement(tssmedia.voiceGroup);
					else
						InvAttachments.removeElement(elm);
					
				}
				
				else if(InspAttachments.containsElement(elm))
				{
					if(elm is TSSAudio)
						InspAttachments.removeElement(tssmedia.voiceGroup);
					else
						InspAttachments.removeElement(elm);
				}
				
				if(geoTagsArr.getItemIndex(tssmedia.geoTag) != -1)
					geoTagsArr.removeItemAt(geoTagsArr.getItemIndex(tssmedia.geoTag));
			}
			
			//----------------------------------------------------------------------------------------
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:SkinnablePopUpContainer id="signPopUp" width="500" height="400"  name="Select Sign"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:Button id="newSignBtn" label="Add A New Sign" width="100%" height="50" click="newSignBtn_clickHandler(event)"/>
					<s:List id="SignList" dataProvider="{currSigns}"   change="closeSignPop(event)" width="100%" height="100%"  labelFunction="{signLabelFunc}" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		<s:SkinnablePopUpContainer id="assetPopUp" width="300" height="700"  name="Select Asset"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="AssetList" dataProvider="{allAssets}" change="closeAssetPop(event)" labelFunction="{assetLabelFunction}" width="100%" height="100%" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		<s:DateTimeFormatter id="InspectionDateDisplay" dateTimePattern="MMMM d, yyyy"/>
	</fx:Declarations>
	
	<s:HGroup>
		<s:Button label="Support" enabled="{viewStack.selectedChild !=Support}" click="{viewStack.selectedChild=Support}"/>
		<s:Button label="Sign" enabled="{viewStack.selectedChild !=Sign}" click="{viewStack.selectedChild=Sign}"/>
		<s:Button label="Inspections" enabled="{viewStack.selectedChild !=Inspections}" click="{viewStack.selectedChild=Inspections}"/>
		<s:Button label="Attachments" enabled="{viewStack.selectedChild !=Attachments}" click="{viewStack.selectedChild=Attachments}"/>
	</s:HGroup>
	<views:CBViewStack id="viewStack" width="100%" height="100%" skinClass="skins.CBScrollableSkin" visible="{dataRetrieved}">
		<s:VGroup  id="Support" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup>
				<s:VGroup width="60%" gap="20">
					<s:HGroup>
						<s:VGroup width="50%">
							<s:HGroup verticalAlign="middle">
								<s:Label text="Route ID:  " fontWeight="bold"/>
								<s:TextInput id="supportRouteIdInput" skinClass="spark.skins.mobile.TextInputSkin"  width="225" editable="false"/>
							</s:HGroup>
							<s:Spacer height="5"/>
							<s:HGroup verticalAlign="middle">
								<s:Label text="Offset:  " fontWeight="bold"/>
								<s:TextInput id="offsetTextInut" skinClass="spark.skins.mobile.TextInputSkin"  width="225" editable="false"/>
								<s:Label text="(m)" fontWeight="bold"/>
							</s:HGroup>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup>
						
							<s:HGroup verticalAlign="middle">
								<s:Label text="Milepoint:  " fontWeight="bold"/>
								<s:TextInput id="milepostTextInut" skinClass="spark.skins.mobile.TextInputSkin"  width="150" editable="false"/>
								<s:Label text="(m)" fontWeight="bold"/>
							</s:HGroup>
							<s:Spacer height="5"/>
							<s:HGroup verticalAlign="middle">
								<s:Label text="From:  " fontWeight="bold"/>
								<s:TextInput id="offsetStreetTextInut" skinClass="spark.skins.mobile.TextInputSkin"  width="250" editable="false"/>
							</s:HGroup>
							
						</s:VGroup>
						
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="SignSupportDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Group id="LocDDGroup"></s:Group>
						</s:VGroup>
						
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="BaseTypeDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Group id="NoOfBasesDDGroup"></s:Group>
						</s:VGroup>
						
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="SubBaseDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Spacer height="25"/>
							<s:Label text="Support Height:  " fontWeight="bold"/>
							
							<s:TextInput  id="PoleHeightTextInut" skinClass="{spark.skins.mobile.TextInputSkin}"  softKeyboardType="{SoftKeyboardType.NUMBER}" restrict = "0-9 \." width="{textInputWidth}"/>
						</s:VGroup>
					</s:HGroup>
					<s:VGroup id="addAttchmentsHolder" left="0" width="60%" />
				</s:VGroup>
				<s:Spacer width="10"/>
				<s:VGroup width="30%">
					<s:VGroup width="50%">
						<s:Group id="SignStatusDDGroup"></s:Group>
					</s:VGroup>
					<s:Spacer height="10"/>
					<s:Label text="Comments:  " fontWeight="bold"/>
					<s:TextArea height="170" width="100%" id= "PoleComments" skinClass="spark.skins.mobile.TextAreaSkin"/>
					<s:Spacer height="10"/>
					<s:Label text="MS Utility ID:  " fontWeight="bold"/>
					<s:TextInput id="MsUtilityTextInut" skinClass="spark.skins.mobile.TextInputSkin" width="{textInputWidth}" editable="false"/>
					<s:Spacer height="10"/>
					<s:VGroup width="50%">
					<s:Group id="MsStartDateGroup"></s:Group>
						</s:VGroup>
					<s:Spacer height="10"/>
					<s:Group id="MsEndDateGroup"></s:Group>
				</s:VGroup>
				
			</s:HGroup>
			
			
		</s:VGroup>
		
		
		<s:VGroup id="Sign" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup verticalAlign="middle">
				<s:Button id="targetSignBtn" label="Select Sign" click="targetSignBtn_clickHandler(event)" />
				<s:Spacer width="20"/>
				<s:TextInput id="signText" text="{selectedSign.SIGNID}" width="325"  editable="false" skinClass="spark.skins.mobile.TextInputSkin"/>
			</s:HGroup>
			<!--			<s:Line width="100%">
			<s:stroke>
			<s:SolidColorStroke color="#000000" weight="1"/>
			</s:stroke>
			</s:Line>-->
			<s:Group id="SignTabGroup">
				
			</s:Group>
		</s:VGroup>
		
		<s:VGroup id="Inspections" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup verticalAlign="middle">
				<s:Button id="newInspectionBtn" label="New Inspection For" click="newInspectionBtn_clickHandler(event)" />
				<s:Spacer width="20"/>
				<s:TextInput id="assetText" width="325"  editable="false" skinClass="spark.skins.mobile.TextInputSkin"/>
			</s:HGroup>
			<s:Spacer height="10"/>
			<s:VGroup width="100%">
				<s:Label text="Asset Inspection History" fontWeight="bold" width="540"/>
				
				<s:DataGrid id="inspHistoryGrid" 
							width="100%" height="300" 
							selectionMode="singleRow"
							gridClick="inspHistoryGrid_gridClickHandler(event)"
							dataProvider="{currInspections}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="AssetLabel" headerText="Asset" labelFunction="formatAssetLabelColumn"/>
							<s:GridColumn dataField="AsseType" headerText="Asset Type" labelFunction="formatAssetTypeColumn"/>
							<s:GridColumn dataField="INSPECTOR" headerText="Inspector"/>
							<s:GridColumn dataField="DATEINSPECTED" headerText="Date" labelFunction="formatInspectionDateColumn"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:VGroup>
		</s:VGroup>
		
		<s:VGroup id ="Attachments"  paddingLeft="20" paddingTop="10">
			<s:Label text="Inventory Attachments" fontWeight="bold"/>
			<s:Group id ="InvAttachments"  height="99%">
				<s:layout>
					<s:TileLayout orientation="rows"/>
					
				</s:layout>
			</s:Group>
			<s:Label text="Inspection Attachments" fontWeight="bold"/>
			<s:Group id ="InspAttachments"  height="99%">
				<s:layout>
					<s:TileLayout/>
					
				</s:layout>
			</s:Group>
		</s:VGroup>
		
	</views:CBViewStack>
	
	<s:HGroup width="100%">
		<s:HGroup horizontalAlign="center" width="100%">
			<s:Button label="Save" height="50" width="187" click="onSave();"/>
			<s:Spacer width="100"/>
			<s:Button label="Close" height="50" width="187" id="clbtn" click="handleCloseEvent();"/>
		</s:HGroup>
		<s:CheckBox label="Retire" id="retireChk" visible="false" change="retireChk_changeHandler(event);"/>
		<s:Button label="Move to Current Location" id="moveBtn"  click="moveBtn_changeHandler(event)" />
	</s:HGroup>
</baseViews:BaseAssetTitleWindow>
