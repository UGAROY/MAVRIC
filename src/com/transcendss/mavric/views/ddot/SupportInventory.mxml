<?xml version="1.0" encoding="utf-8"?>
<baseViews:BaseAssetTitleWindow  xmlns:fx="http://ns.adobe.com/mxml/2009" 
								 xmlns:s="library://ns.adobe.com/flex/spark" title="Support Inventory"
								 width="1030" height="750"
								 close="handleCloseEvent()"
								 creationComplete="init()"
								 skinClass="skins.MavricTitleWindowSkin"
								 xmlns:baseViews="com.transcendss.mavric.views.baseViews.*" xmlns:views="com.transcendss.mavric.views.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ddot="com.transcendss.mavric.views.ddot.*">
	
	<fx:Script>
		<![CDATA[
			import com.transcendss.mavric.db.MAVRICDBManager;
			import com.transcendss.mavric.events.AssetEvent;
			import com.transcendss.mavric.managers.ddot.DdotRecordManager;
			import com.transcendss.mavric.util.DatePickerViewHoriz;
			import com.transcendss.mavric.util.DropDownViewHoriz;
			import com.transcendss.mavric.util.DropDownViewVert;
			import com.transcendss.mavric.views.componentviews.AddAttachments;
			import com.transcendss.mavric.views.ddot.Inspections;
			import com.transcendss.mavric.views.ddot.SignInventory;
			import com.transcendss.transcore.events.CameraEvent;
			import com.transcendss.transcore.events.VoiceEvent;
			import com.transcendss.transcore.events.videoEvent;
			import com.transcendss.transcore.sld.models.StickDiagram;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			import com.transcendss.transcore.sld.models.components.GeoTag;
			import com.transcendss.transcore.sld.models.managers.GeotagsManager;
			import com.transcendss.transcore.util.TSSAudio;
			import com.transcendss.transcore.util.TSSPicture;
			import com.transcendss.transcore.util.TSSVideo;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.rpc.Responder;
			
			import spark.components.Button;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.skins.mobile.TextInputSkin;
			
			import skins.HeaderlessPanelSkin;
			import skins.TSSSkinnablePopUpContainerSkin;
			
			
			[Bindable]
			private var textInputWidth:Number = 300;
			private var gtManager:GeotagsManager = new GeotagsManager();
			private var locDDView:DropDownViewVert = new DropDownViewVert();
			private var signSupportDDView:DropDownViewVert = new DropDownViewVert();
			private var supportStatusDDView:DropDownViewVert = new DropDownViewVert();
			private var baseTypeDDView:DropDownViewVert = new DropDownViewVert();
			private var numberOfBasesDDView:DropDownViewVert = new DropDownViewVert();
			private var subBaseDDView:DropDownViewVert = new DropDownViewVert();
			private var attchView:AddAttachments = new AddAttachments();
			
			private var startDateView:DatePickerViewHoriz = new DatePickerViewHoriz();
			private var endDateView:DatePickerViewHoriz = new DatePickerViewHoriz();
			
			private var dbManager:MAVRICDBManager;
			private var recordManager:DdotRecordManager;
			
			[Bindable]
			private var allAssets:ArrayCollection = new ArrayCollection();
			
			private var currSupport:BaseAsset = null;
			private var currSupportID:Number = -1;
			[Bindable]
			private var currSigns:ArrayCollection = new ArrayCollection();
			private var currSignTab:SignTab = null;
			[Bindable]
			private var selectedSign:Object = new Object();
			[Bindable]
			private var currInspections:ArrayCollection = new ArrayCollection();
			private var inspectionDetailsForm:InspectionDetails = null;
			
			private var currLinkDict:Object = new Object();
			private var currLinkTrDict:Object = new Object();
			
			[Bindable]
			private var dataRetrieved:Boolean = false;
			
			// A variable to store the new Sign ID
			private var newSignID:Number = 0;
			
			private function init():void
			{
				try
				{
					
					dbManager = MAVRICDBManager.newInstance();
					recordManager = FlexGlobals.topLevelApplication.GlobalComponents.recordManager;
					
					locDDView.domainTableIDColName =  "LOCATION";
					locDDView.fetchDomainValues();
					locDDView.btnText = "Location";
					locDDView.genericPopup.height = 200;
					LocDDGroup.addElement(locDDView);
					
					signSupportDDView.domainTableIDColName =  "POLEMATERIAL";
					signSupportDDView.fetchDomainValues();
					signSupportDDView.btnText = "Sign Support";
					signSupportDDView.genericPopup.height = 200;
					SignSupportDDGroup.addElement(signSupportDDView);
					
					supportStatusDDView.domainTableIDColName =  "POLESTATUS";
					supportStatusDDView.fetchDomainValues();
					supportStatusDDView.btnText = "Sign Status";
					supportStatusDDView.genericPopup.height = 200;
					SignStatusDDGroup.addElement(supportStatusDDView);
					
					baseTypeDDView.domainTableIDColName =  "BASETYPE";
					baseTypeDDView.fetchDomainValues();
					baseTypeDDView.btnText = "Base Type";
					baseTypeDDView.genericPopup.height = 200;
					BaseTypeDDGroup.addElement(baseTypeDDView);
					
					numberOfBasesDDView.domainTableIDColName =  "NOOFHEADS";
					numberOfBasesDDView.fetchDomainValues();
					numberOfBasesDDView.btnText = "Number of Bases";
					numberOfBasesDDView.genericPopup.height = 200;
					NoOfBasesDDGroup.addElement(numberOfBasesDDView);
					
					subBaseDDView.domainTableIDColName =  "SUBBASE";
					subBaseDDView.fetchDomainValues();
					subBaseDDView.btnText = "Sub Base";
					subBaseDDView.genericPopup.height = 200;
					SubBaseDDGroup.addElement(subBaseDDView);
					
					startDateView.btnText = "MS Start Date";
					startDateView.width_TI = 120;
					MsStartDateGroup.addElement(startDateView);
					endDateView.btnText = "MS End Date";
					endDateView.width_TI = 120;
					MsEndDateGroup.addElement(endDateView);
					
					attchView.init("SupportInventory",true,true,true);
					addAttchmentsHolder.addElement(attchView);
					
					var eve:AssetEvent = new AssetEvent(AssetEvent.CULVERTFORMLOADED);
					dispatchEvent(eve);
					
					// Listen to viewStack index change event
//					viewStack.addEventListener(IndexChangeEvent.CHANGE, function (event:Event) {
//						trace("HaHa");
//					});
				}
				catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
				
			}
			
			
			private function onSave():void
			{
				saveSupport();
			}
			
			private function saveSupport():void
			{
				if(this.retireChk.selected)
				{
					currSupport['invProperties'].RETIRED.value=1;
				}
				else
				{
					currSupport['invProperties'].LOCATION.value = locDDView.domainID;
					currSupport['invProperties'].POLEMATERIAL.value = signSupportDDView.domainID;
					currSupport['invProperties'].POLESTATUS.value = supportStatusDDView.domainID;
					currSupport['invProperties'].BASETYPE.value = baseTypeDDView.domainID;
					currSupport['invProperties'].NOOFHEADS.value = numberOfBasesDDView.domainID;
					currSupport['invProperties'].SUBBASE.value = subBaseDDView.domainID;
					currSupport['invProperties'].POLEHEIGHT.value = PoleHeightTextInut.text;
					currSupport['invProperties'].COMMENTS.value = PoleComments.text;
				}
				
				var supportEvent:AssetEvent = new AssetEvent(AssetEvent.NEWCULVERT , true, true);
				supportEvent.culvert = currSupport;
				dispatchEvent(supportEvent);
				
				
				// Save the signs
				keepValuesInCurrSignTab(); // Keep the values of current sign tab. The workflow here is not very straightforward, but anyway...
				recordManager.saveSigns(currSigns);
				
				// Save the inspections
				recordManager.saveInspections(currInspections);
				
				// Save the links
				recordManager.saveLink(currLinkDict);
				
				// Save the time restrictions
				recordManager.saveTimeRestriction(currLinkTrDict);
			}
			
			public override function setBaseAsset(baseAsst:BaseAsset):void
			{
				currSupport = baseAsst;
				currSupportID = currSupport.id;
				
				supportRouteIdInput.text = currSupport['routeName'] || "";
				milepostTextInut.text = parseFloat(currSupport['milePost'] || "").toFixed(3);
				locDDView.domainID = currSupport['invProperties'].LOCATION.value || "";
				signSupportDDView.domainID = currSupport['invProperties'].POLEMATERIAL.value || "";
				supportStatusDDView.domainID = currSupport['invProperties'].POLESTATUS.value || "";
				baseTypeDDView.domainID = currSupport['invProperties'].BASETYPE.value || "";
				numberOfBasesDDView.domainID = currSupport['invProperties'].NOOFHEADS.value || "";
				subBaseDDView.domainID = currSupport['invProperties'].SUBBASE.value || "";
				PoleHeightTextInut.text = currSupport['invProperties'].POLEHEIGHT.value || "";
				PoleComments.text = currSupport['invProperties'].COMMENTS.value || "";
				
				var signResp:mx.rpc.Responder = new mx.rpc.Responder(signReqReponse,  failReqHandler);
				recordManager.getSigns(currSupportID, signResp);
			}
			
			private function signReqReponse(result:Object):void
			{
				currSigns = result as ArrayCollection;
				
				var currSignIDs:Array = new Array();
				for each(var item:Object in currSigns)
				{
					currSignIDs.push(item['SIGNID']);
				}
				
				var inspectionResp:mx.rpc.Responder = new mx.rpc.Responder(inspectionReqResponse, failReqHandler);
				recordManager.getInspections(currSupportID, currSignIDs, inspectionResp);
			}
			
			private function inspectionReqResponse(result:Object):void
			{
				currInspections = result as ArrayCollection;
				
				// Finished loading all the data
				dataRetrieved = true;
			}
			
			private function failReqHandler():void
			{
				FlexGlobals.topLevelApplication.setBusyStatus(false);
				FlexGlobals.topLevelApplication.TSSAlert("Error in obtaining data");
			}
			
			public  override function handleCloseEvent(event:Event = null):void 
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function retireChk_changeHandler(event:Event):void
			{
				
			}
			
			protected function moveBtn_changeHandler(event:Event):void
			{
				
			}
			
			
			//--------------------------------Sign Tab-------------------------------------------------
			protected function targetSignBtn_clickHandler(event:MouseEvent):void
			{
//				if (currSignTab != null && currSignTab.signValuesbeenChanged())
//				{
//					var msg:String = "The current sign has been edited, do you want to keep the changes?";
//					var resp:mx.rpc.Responder = new mx.rpc.Responder(updateSelectedSignValues, openSignPop);
//					FlexGlobals.topLevelApplication.YesNoPrompt(msg, "Warning", resp);
//				} 
				keepValuesInCurrSignTab();
				openSignPop();
				
				// Click the current selected item to make sure the item can be clicked more than once
				SignList.selectedItem = null;
				SignList.validateDisplayList();
			}
			
			protected function keepValuesInCurrSignTab():void
			{
				if (currSignTab != null)
				{
					// Update the values before switching to another sign
					currSignTab.updateSignValues();
					// If it is a new sign, push it to the currSign list
					if (currSignTab.isNewSign)
						currSigns.addItem(selectedSign);
					// add link
					if (currSignTab.linkSignPair != null)
						currLinkDict[currSignTab.sign['SIGNID']] = currSignTab.linkSignPair;	
					// add timerestriction
					if (currSignTab.linkTimeRestrictions != null && currSignTab.linkTimeRestrictions.length >0)
						currLinkTrDict[currSignTab.linkSignPair['NEW']] = currSignTab.linkTimeRestrictions;
				}
			}
			
			protected function newSignBtn_clickHandler(event:MouseEvent):void
			{
				signPopUp.close(true);
				
				selectedSign = recordManager.createNewSign(currSupportID);
				loadSelectedSign(true);
			}
			
			protected function openSignPop(data:Object=null):void
			{
				signPopUp.open(this,false);
				PopUpManager.centerPopUp(signPopUp);
			}
			
			protected function closeSignPop(event:Event):void
			{
				signPopUp.close(true, SignList.selectedItem);
				
				selectedSign = SignList.selectedItem;				
				loadSelectedSign(false);
			}
			
			private function loadSelectedSign(isNewSign:Boolean):void
			{
				// Clear all the previous sign info
				SignTabGroup.removeAllElements();
				
				currSignTab = new SignTab();
				SignTabGroup.addElement(currSignTab);
				
				// Load the sign info
				currSignTab.sign = selectedSign;
				currSignTab.isNewSign = isNewSign;
				currSignTab.currSupportID = currSupportID;
				currSignTab.loadSignInfo();
			}
			
			//-----------------------------------------------------------------------------------------
			
			//------------------------Inspection Tab--------------------------------------------------
			private function getAllAssets():void
			{
				// Clear old data
				allAssets.removeAll();
				
				// Build the allAssets variable
				allAssets.addItem({POLEID: currSupportID, SIGNID: null});
				for each(var item:Object in currSigns)
				{
					allAssets.addItem({SIGNID: item['SIGNID'], POLEID: null});
				}
			}
			
			protected function newInspectionBtn_clickHandler(event:MouseEvent):void
			{
				// To make sure we get the newly added sign if switch from a newly added sign tab to inspection tab
				// As I mentioned earlier, the ui for adding the new sign cannot really have a clean workflow for adding signs
				// Another solution will be listening to the indexChange Event on the cbStackView
				keepValuesInCurrSignTab();
				
				getAllAssets();
				
				assetPopUp.open(this,false);
				PopUpManager.centerPopUp(assetPopUp);
			}
			
			protected function closeAssetPop(event:Event):void
			{
				assetPopUp.close(true, AssetList.selectedItem);
				openInspectionEditor();
				
				// Create a new inspection object
				inspectionDetailsForm.isNewInspection = true;
				inspectionDetailsForm.inspection = recordManager.createNewInspection(AssetList.selectedItem['POLEID'], AssetList.selectedItem['SIGNID']);
			}
			
			private function inspHistoryGrid_gridClickHandler(event:GridEvent):void
			{
				openInspectionEditor();
				
				// Load the current inspection
				inspectionDetailsForm.isNewInspection = false;
				inspectionDetailsForm.inspection = event.item;
				inspectionDetailsForm.loadInspectionInfo();
			}
			
			private function openInspectionEditor():void
			{
				inspectionDetailsForm = new InspectionDetails();
				inspectionDetailsForm = PopUpManager.createPopUp(this, InspectionDetails) as InspectionDetails;
				inspectionDetailsForm.inspectionEditedCallback = inspectionEditedCompleteHandler;
				PopUpManager.centerPopUp(inspectionDetailsForm);
			}
			
			private function inspectionEditedCompleteHandler(inspection:Object, isNewInspection:Boolean):void
			{
				if (isNewInspection)
					currInspections.addItem(inspection);
				else
					currInspections.refresh();
			}
			
			private function assetLabelFunction(item:Object):String
			{
				return item['POLEID'] != null ? "Support -- " + item['POLEID'] : "Sign -- " + item['SIGNID'] 
			}
			
			private function formatAssetLabelColumn(item:Object, column:GridColumn):String
			{
				return item['POLEID'] != null ? "Support -- " + item['POLEID'] : "Sign -- " + item['SIGNID'];
			}
			
			private function formatAssetTypeColumn(item:Object, column:GridColumn):String
			{
				if (item['POLEID'] != null && item['POLEID'] != 0)
					return "Support";
				else
				{
					for each(var sign:Object in currSigns)
					{
						if (sign['SIGNID'] == item['SIGNID'])
							return sign['DESCRIPTION'];
					}					
					//return FlexGlobals.topLevelApplication.GlobalComponents.recordManager.signTypeDictionary[sign['SIGNTYPE']];
				}
				return "";
			}
			
			private function formatInspectionDateColumn(item:Object, column:GridColumn):String
			{
				return InspectionDateDisplay.format(item[column.dataField]);
			}
			//----------------------------------------------------------------------------------------
			
			
			//-----------------------------GeoTags----------------------------------------------------
			public override function handlePicture(event:CameraEvent):void
			{
//				event.stopImmediatePropagation();
//				if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SignInv")
//				{
//					var bmp:Bitmap = event.bitmap;
//					var tmpImage:TSSPicture = new TSSPicture();
//					tmpImage.source = bmp; //icon is now the captured image itself
//					tmpImage.bitmap = bmp;
//					tmpImage.width = 40;//120;
//					tmpImage.height = 40;//120;
//					
//					
//					var fileName:String = new Date().time + ".png";
//					var tmpGT:GeoTag = new GeoTag();
//					tmpGT.cached_route_id = signRouteInput.text;
//					if(milepost==-1)
//						milepost =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
//					tmpGT.begin_mile_point = milepost;
//					if(asset_base_id != null && asset_base_id !="")
//					{
//						tmpGT.asset_base_id = asset_base_id;
//						tmpGT.local_asset_id = ""+sign_id;
//					}
//					else if (sign_id !=-1)
//					{
//						tmpGT.local_asset_id = sign_id.toString();
//						tmpGT.asset_base_id = "";
//					}
//					else
//					{
//						tmpGT.local_asset_id = "";
//						tmpGT.asset_base_id = "";
//					}
//					tmpGT.end_mile_point = 0;
//					tmpGT.image_file_name = fileName;
//					tmpGT.text_memo = event.memo;
//					tmpGT.is_insp = 0;
//					
//					tmpGT.asset_ty_id = currentSign!=null?currentSign.assetType:"1";
//					geoTagsArr.addItem(tmpGT);
//					
//					tmpImage.geoTag = tmpGT;
//					if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SupportInventory")
//						InvAttachments.addElement(tmpImage);
//				}
//				try
//				{
//					FlexGlobals.topLevelApplication.setBusyStatus(true);
//					fileUtility.WritePicture(fileName, bmp);
//					FlexGlobals.topLevelApplication.setBusyStatus(false);
//				} catch (er:Error)
//				{
//					FlexGlobals.topLevelApplication.setBusyStatus(false);
//					FlexGlobals.topLevelApplication.TSSAlert(er.message);
//				}
			}
			
			//function to handle VideoEvent
			public override function handleVideo(event:videoEvent):void{
//				event.stopImmediatePropagation();
//				if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SignInv")
//				{
//					var vid:TSSVideo =new TSSVideo();
//					vid.source=gtManager.video;
//					vid.video=event.video;
//					//					vid.x=stickGroup.horizontalScrollPosition + (stickGroup.width / 2) - 20;
//					//					vid.y=getIconY("video");
//					vid.width=40;
//					vid.height=40;
//					
//					try
//					{
//						FlexGlobals.topLevelApplication.setBusyStatus(true);
//						var fileName:String=new Date().time +".3gp";
//						fileUtility.WriteVideo(vid.video, fileName, event.path);
//						//vid.filePath="file:///mnt/sdcard/geotags/" + fileName;
//						vid.filePath = fileName;
//						FlexGlobals.topLevelApplication.setBusyStatus(false);
//						
//						
//						var tmpGT:GeoTag=new GeoTag();
//						tmpGT.cached_route_id=signRouteInput.text;
//						if(asset_base_id != null && asset_base_id !="")
//						{
//							tmpGT.asset_base_id = asset_base_id;
//							tmpGT.local_asset_id = ""+sign_id;
//						}
//						else if (sign_id != -1)
//						{
//							tmpGT.local_asset_id = sign_id.toString();
//							tmpGT.asset_base_id = "";
//						}
//						else
//						{
//							tmpGT.local_asset_id = "";
//							tmpGT.asset_base_id = "";
//						}
//						if(milepost==-1)
//							milepost =FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
//						tmpGT.begin_mile_point=milepost;
//						tmpGT.end_mile_point=0;
//						tmpGT.voice_file_name="";
//						tmpGT.image_file_name="";
//						//tmpGT.video_file_name = vid.filePath;
//						tmpGT.video_file_name = fileName;
//						tmpGT.text_memo = event.memo;
//						tmpGT.is_insp = 0;
//						
//						tmpGT.asset_ty_id = currentSign!=null?currentSign.assetType:"1";
//						//						if((tmpGT.local_asset_id == null ||  tmpGT.local_asset_id == "") && (tmpGT.asset_base_id == null ||  tmpGT.asset_base_id == ""))
//						geoTagsArr.addItem(tmpGT);
//						//						else
//						//							vid.geoLocalId = ""+ dbManager.addGeoTag(tmpGT);
//						vid.geoTag = tmpGT;
//						if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SignInv")
//							InvAttachments.addElement(vid);
//						//						else
//						//							InspAttachments.addElement(vid);
//						
//					} catch (er:Error)
//					{
//						FlexGlobals.topLevelApplication.setBusyStatus(false);
//						FlexGlobals.topLevelApplication.TSSAlert(er.message);
//					}
//					
//					
//				}
				
			}		
			
			public override function handleVoiceMemo(event:VoiceEvent):void
			{
				event.stopImmediatePropagation();
				if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SupportInventory")
				{
					
					var soundBytes:ByteArray=event.byteArray;
					var tmpImage:TSSAudio = new TSSAudio();
					tmpImage.source = gtManager.voice;
					tmpImage.soundBytes = event.byteArray;
					tmpImage.width = 40;
					tmpImage.height = 40;
					var fileName:String = new Date().time +".wav";
					var tmpGT:GeoTag = new GeoTag();
					tmpGT.cached_route_id = supportRouteIdInput.text;
					
					tmpGT.begin_mile_point = FlexGlobals.topLevelApplication.sldDiagram.sldDiagram.getCurrentMP();
					tmpGT.local_asset_id = "" + currSupportID;
					tmpGT.end_mile_point = 0;
					tmpGT.image_file_name = "";
					tmpGT.voice_file_name= fileName;
					tmpGT.video_file_name="";
					tmpGT.image_file_name="";
					tmpGT.text_memo = "";
					tmpGT.is_insp = 0;
					
					tmpGT.asset_ty_id = currSupport!=null? currSupport.assetType:"1";
					geoTagsArr.addItem(tmpGT);
					tmpImage.geoTag = tmpGT;
					if(FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource == "SupportInventory")
					{
						var vContainer:VGroup = new VGroup();
						vContainer.horizontalAlign = "center";
						var assetLabel:Label = new Label();
						assetLabel.text = "Support --- " + currSupportID;
						vContainer.addElement(tmpImage);
						vContainer.addElement(assetLabel);
						InvAttachments.addElement(vContainer);
					}
						
					
					try{
						FlexGlobals.topLevelApplication.setBusyStatus(true);
						fileUtility.saveToWAV(event.byteArray, fileName);
						FlexGlobals.topLevelApplication.setBusyStatus(false);
					}
					catch(e:Error){
						FlexGlobals.topLevelApplication.setBusyStatus(false);
						FlexGlobals.topLevelApplication.TSSAlert(e.message);
					}
				}
			}
			
			
			//----------------------------------------------------------------------------------------
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:SkinnablePopUpContainer id="signPopUp" width="300" height="400"  name="Select Sign"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:Button id="newSignBtn" label="Add A New Sign" width="100%" height="50" click="newSignBtn_clickHandler(event)"/>
					<s:List id="SignList" dataProvider="{currSigns}"   change="closeSignPop(event)" width="100%" height="100%" labelField="SIGNID" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		<s:SkinnablePopUpContainer id="assetPopUp" width="300" height="400"  name="Select Asset"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin">
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="AssetList" dataProvider="{allAssets}" change="closeAssetPop(event)" labelFunction="{assetLabelFunction}" width="100%" height="100%" fontSize="18" allowMultipleSelection="false"/>
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		<s:DateTimeFormatter id="InspectionDateDisplay" dateTimePattern="MMMM d, yyyy"/>
	</fx:Declarations>
	
	<s:HGroup>
		<s:Button label="Support" enabled="{viewStack.selectedChild !=Support}" click="{viewStack.selectedChild=Support}"/>
		<s:Button label="Sign" enabled="{viewStack.selectedChild !=Sign}" click="{viewStack.selectedChild=Sign}"/>
		<s:Button label="Inspections" enabled="{viewStack.selectedChild !=Inspections}" click="{viewStack.selectedChild=Inspections}"/>
		<s:Button label="Attachments" enabled="{viewStack.selectedChild !=Attachments}" click="{viewStack.selectedChild=Attachments}"/>
	</s:HGroup>
	<views:CBViewStack id="viewStack" width="100%" height="100%" skinClass="skins.CBScrollableSkin" visible="{dataRetrieved}">
		<s:VGroup  id="Support" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup>
				<s:VGroup width="60%" gap="20">
					<s:HGroup>
						<s:VGroup width="50%">
							<s:HGroup verticalAlign="middle">
								<s:Label text="Route ID:  " fontWeight="bold"/>
								<s:TextInput id="supportRouteIdInput" width="225" editable="false"/>
							</s:HGroup>
							<s:Spacer height="5"/>
							<s:HGroup verticalAlign="middle">
								<s:Label text="Milepoint:  " fontWeight="bold"/>
								<s:TextInput id="milepostTextInut" width="225" editable="false"/>
							</s:HGroup>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Group id="LocDDGroup"></s:Group>
						</s:VGroup>
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="SignSupportDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Group id="SignStatusDDGroup"></s:Group>
						</s:VGroup>
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="BaseTypeDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Group id="NoOfBasesDDGroup"></s:Group>
						</s:VGroup>
					</s:HGroup>
					<s:HGroup>
						<s:VGroup width="50%">
							<s:Group id="SubBaseDDGroup"></s:Group>
						</s:VGroup>
						<s:Spacer width="10"/>
						<s:VGroup width="50%">
							<s:Spacer height="25"/>
							<s:Label text="Pole Height:  " fontWeight="bold"/>
							<s:TextInput id="PoleHeightTextInut" width="{textInputWidth}"/>
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
				<s:Spacer width="10"/>
				<s:VGroup width="30%">
					<s:Label text="Comments:  " fontWeight="bold"/>
					<s:TextArea height="170" width="100%" id= "PoleComments"/>
					<s:Spacer height="10"/>
					<s:Label text="MS Utility ID:  " fontWeight="bold"/>
					<s:TextInput id="MsUtilityTextInut" width="{textInputWidth}"/>
					<s:Spacer height="10"/>
					<s:Group id="MsStartDateGroup"></s:Group>
					<s:Spacer height="10"/>
					<s:Group id="MsEndDateGroup"></s:Group>
				</s:VGroup>
			</s:HGroup>
			
			<s:Spacer height="20"/>
			
			<s:VGroup id="addAttchmentsHolder" gap="10" right="0" width="100%" />
		</s:VGroup>
		
		
		<s:VGroup id="Sign" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup verticalAlign="middle">
				<s:Button id="targetSignBtn" label="Target Sign" click="targetSignBtn_clickHandler(event)" />
				<s:Spacer width="20"/>
				<s:TextInput id="signText" text="{selectedSign['SIGNID']}" width="325"  editable="false" skinClass="spark.skins.mobile.TextInputSkin"/>
			</s:HGroup>
			<!--			<s:Line width="100%">
			<s:stroke>
			<s:SolidColorStroke color="#000000" weight="1"/>
			</s:stroke>
			</s:Line>-->
			<s:Group id="SignTabGroup">
				
			</s:Group>
		</s:VGroup>
		
		<s:VGroup id="Inspections" paddingLeft="20" paddingTop="20" paddingRight="20">
			<s:HGroup verticalAlign="middle">
				<s:Button id="newInspectionBtn" label="New Inspection For" click="newInspectionBtn_clickHandler(event)" />
				<s:Spacer width="20"/>
				<s:TextInput id="assetText" width="325"  editable="false" skinClass="spark.skins.mobile.TextInputSkin"/>
			</s:HGroup>
			<s:Spacer height="10"/>
			<s:VGroup width="100%">
				<s:Label text="Asset Inspection History" fontWeight="bold" width="540"/>
				
				<s:DataGrid id="inspHistoryGrid" 
							width="100%" height="300" 
							selectionMode="singleRow"
							gridClick="inspHistoryGrid_gridClickHandler(event)"
							dataProvider="{currInspections}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="AssetLabel" headerText="Asset" labelFunction="formatAssetLabelColumn"/>
							<s:GridColumn dataField="AsseType" headerText="Asset Type" labelFunction="formatAssetTypeColumn"/>
							<s:GridColumn dataField="INSPECTOR" headerText="Inspector"/>
							<s:GridColumn dataField="DATEINSPECTED" headerText="Date" labelFunction="formatInspectionDateColumn"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:VGroup>
		</s:VGroup>
		
		<s:VGroup id ="Attachments"  paddingLeft="20" paddingTop="10">
			<s:Label text="Inventory Attachments" fontWeight="bold"/>
			<s:Group id ="InvAttachments"  height="99%">
				<s:layout>
					<s:TileLayout/>
					
				</s:layout>
			</s:Group>
			<s:Label text="Inspection Attachments" fontWeight="bold"/>
			<s:Group id ="InspAttachments"  height="99%">
				<s:layout>
					<s:TileLayout/>
					
				</s:layout>
			</s:Group>
		</s:VGroup>
		
	</views:CBViewStack>
	
	<s:HGroup width="100%">
		<s:HGroup horizontalAlign="center" width="100%">
			<s:Button label="Save" click="onSave();"/>
			<s:Button label="Close" id="clbtn" click="handleCloseEvent();"/>
		</s:HGroup>
		<s:CheckBox label="Retire" id="retireChk" change="retireChk_changeHandler(event);"/>
		<s:Button label="Move to Current Location" id="moveBtn"  click="moveBtn_changeHandler(event)" />
	</s:HGroup>
</baseViews:BaseAssetTitleWindow>
