<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:components="spark.components.*"
			   xmlns:views="com.transcendss.mavric.views.*"
			   xmlns:controllers="com.transcendss.mavric.controllers.*"
			   xmlns:mate="http://mate.asfusion.com/"
			   width="1072" height="749"  
			   skinClass="skins.MavricTitleWindowSkin"
			   
			   title="Asset Editor"
			   creationComplete="init()"
			   close="handleCloseEvent()">
	
	<!--<fx:Script>
		<![CDATA[
			import com.adobe.audio.format.WAVWriter;
			import com.adobe.serialization.json.JSONParseError;
			import com.transcendss.mavric.db.GeoTag;
			import com.transcendss.mavric.db.MAVRICDBManager;
			import com.transcendss.mavric.events.CameraEvent;
			import com.transcendss.mavric.events.TextMemoEvent;
			import com.transcendss.mavric.events.VoiceEvent;
			import com.transcendss.mavric.events.videoEvent;
			import com.transcendss.mavric.util.FileUtility;
			import com.transcendss.mavric.util.TSSALoader;
			import com.transcendss.mavric.util.TSSAudio;
			import com.transcendss.mavric.util.TSSLoader;
			import com.transcendss.mavric.util.TSSMemo;
			import com.transcendss.mavric.util.TSSPicture;
			import com.transcendss.mavric.util.TSSVideo;
			import com.transcendss.transcore.events.InventoryMenuEvent;
			import com.transcendss.transcore.events.MenuBarEvent;
			import com.transcendss.transcore.events.RouteSelectorEvent;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			import com.transcendss.transcore.sld.models.components.Element;
			import com.transcendss.transcore.sld.models.components.Materials;
			import com.transcendss.transcore.sld.models.components.Route;
			import com.transcendss.transcore.util.Converter;
			
			import flash.events.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.*;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import org.alivepdf.pages.Page;
			
			import spark.components.ComboBox;
			import spark.components.Group;
			import spark.components.Image;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.supportClasses.Skin;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.PopUpEvent;
			import spark.skins.spark.PanelSkin;
			import spark.validators.NumberValidator;
			import flash.events.EventDispatcher;
			import flash.events.Event;
			import com.transcendss.mavric.events.SaveEvent;
			
			[Bindable]
			[Embed(source="images/sld/camera-icon.png")] protected var camera:Class
			[Embed(source="images/sld/web-camera-icon.png")] protected var video:Class
			[Embed(source="images/sld/microphone-icon.png")] protected var voice:Class
			[Embed(source="images/sld/note-icon.png")] protected var memo:Class
			
			private var dbManager:MAVRICDBManager;
			private var baseAsset:BaseAsset;
			private var panels: ArrayList;
			private var images: Vector.<Image>;
			private var bigGroup : Group = new Group(); 
			private var viewStackGroup: HGroup = new HGroup();
			private var invComponents : ArrayList = new ArrayList();
			private var inspComponents : ArrayList = new ArrayList();
			private var currentDropDown : String;
			private var dropDowns : ArrayList = new ArrayList();

			// Method to handle initialization of the asset edit form
			protected function init(ev:Event):void
			{
				baseAsset = new BaseAsset("InnerFiles/Asset_Entry_Template_test.json");
				try
				{
					dbManager = new MAVRICDBManager();
					var str: String;

					var httpService:HTTPService = new HTTPService();
					
					httpService.url = "InnerFiles/Data_Entry_Template_test.json"; // baseAsset.get___();
					
					httpService.resultFormat = "text";
					
					httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
					
					httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
					
					httpService.send();
					
					function onFaultHttpService(e:FaultEvent):void
					{
						//Alert.show("Unable to load Files/file.json.");
						trace("Error!");
					}
					
					
					function onResultHttpService(e:ResultEvent):void
					{
						str = e.result as String;
						trace(str);
						try
						{
							parseConfig(str);
						}catch(jserr:JSONParseError)
						{
							FlexGlobals.topLevelApplication.TSSAlert(jserr.getStackTrace());
						}
						
					}
					
				} catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
			}
			
			public function setBaseAsset(asset:BaseAsset):void
			{
				baseAsset = asset;
				
				// Build the form here
				try
				{
					dbManager = new MAVRICDBManager();
					var str: String;
					
					var httpService:HTTPService = new HTTPService();
					
					httpService.url = "InnerFiles/Data_Entry_Template_test.json";
					
					httpService.resultFormat = "text";
					
					//httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
					httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
					
					httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
					
					httpService.send();
					
					function onFaultHttpService(e:FaultEvent):void
					{
						//Alert.show("Unable to load Files/file.json.");
						trace("Error!");
					}
					
					
					function onResultHttpService(e:ResultEvent):void
					{
						str = e.result as String;
						try
						{
							trace(str);
							parseConfig(str);
							
						}catch(jserr: JSONParseError)
						{
							FlexGlobals.topLevelApplication.TSSAlert(jserr.getStackTrace());
						}
						
					}
					
				} catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
			}
			
			private function parseConfig(s: String): void
			{
				var configObj : Object = JSON.parse(s);
				var top : Group = new Group();
				var tabs : Array = configObj.DATA_ENTRY_TEMPLATE.TABS;
				panels = new ArrayList();
				
				// Title Label for the form
				tabButtonGroup = new HGroup();
				var editLabel : Label = new Label();
				editLabel.text = configObj.DATA_ENTRY_TEMPLATE.TITLE;
				tabButtonGroup.addElement(editLabel);
				
				var buttons : Vector.<Button> = new Vector.<Button>();
				var button : Button;
				var groups : Array;
				var group : Group;
				
				//For every Group within the viewStack
				for(var ti : int = 0; ti < tabs.length; ti++)
				{
					// the var groups does NOT represent the array of panels
					groups = tabs[ti].GROUPS as Array;
					group = new Group();
					
					// refers to Inventory
					group.id = tabs[ti].TYPE;
					
					//Take care of the buttons
					setButton(buttons, button, tabs[ti].ID, group);
					if(ti == 0)
					{
						buttons[0].enabled = false;
					}
					
					var vg: VGroup;
					//For every VGroup within a Group
					for(var i : int = 0; i < groups.length; i++)
					{
						var groupObj : Object = groups[i];
						
						// Defining each VGroup
						vg = new VGroup();

						var hg: HGroup; 
						var controls : Array = groupObj.CONTROLS as Array; 
						
						//For every control (HGroup) within a VGroup
						for(var j : int = 0; j < controls.length; j++)
						{
							hg = new HGroup();
							var label : Label = new Label();
							label.text = controls[j].Label;
							hg.addElement(label);
							
							//This series of conditionals determines what type of input component to create
							if(controls[j].TYPE == "TextInput")
							{
								var txtInp : TextInput = new TextInput();
								txtInp.id = controls[j].ID;
								
								hg.addElement(txtInp);
								
								if(tabs[ti].TYPE === "Inventory")
								{
									invComponents.addItem(txtInp);
									txtInp.text = baseAsset.invProperties[txtInp.id].value;
									
								}
								else if(tabs[ti].TYPE === "Inspection")
								{
									inspComponents.addItem(txtInp);
									txtInp.text = baseAsset.inspProperties[txtInp.id].value;
								}
							}
							else if(controls[j].TYPE == "DropDownButton")
							{
								
								var txtInp : TextInput  = new TextInput();
								var btn : Button = new Button();
								btn.content = "Select";
								btn.id = controls[j].ID;
								txtInp.id = controls[j].ID;
								
								txtInp.editable = false;
								
								btn.addEventListener(MouseEvent.CLICK, setgenericPopup);
								hg.addElement(txtInp);
								hg.addElement(btn);
								dropDowns.addItem(txtInp);
								
								if(tabs[ti].TYPE === "Inventory")
								{
									invComponents.addItem(txtInp);
									txtInp.text = baseAsset.invProperties[txtInp.id].value;
								}
								else if(tabs[ti].TYPE === "Inspection")
								{
									inspComponents.addItem(txtInp);
									txtInp.text = baseAsset.inspProperties[txtInp.id].value;
								}
								
							}
							
							//Set properties and add elements of the VGroup
							setVGroup(vg, hg, groupObj);
							
						}
						
						group.addElement(vg);
					}
					
					bigGroup.addElement(group);
					
					panels.addItem(group);
					if(ti != 0)
					{
						group.setVisible(false);	
					}
				}
				for(var bi: int = 0; bi < buttons.length; bi++)
				{
					tabButtonGroup.addElement((Button)(buttons[bi]));
				}
				viewStackGroup.addElement(bigGroup);
				enableGeoTags(configObj.ENABLEGEOTAGS);
				viewStack.addElement(viewStackGroup);
				btnRetire.addEventListener(MouseEvent.CLICK, retireChk_changeHandler);
				
			}
			
			private function setVGroup(vg : VGroup, hg:HGroup, groupObj:Object):void
			{
				
				if(vg.numChildren == 0)
				{
					var space : Label = new Label();
					var vgtitle : Label = new Label();
					vgtitle.text = groupObj.TITLE;
					vg.addElement(vgtitle);
					vg.addElement(space);
				}
				
				vg.addElement(hg);
				vg.x = groupObj.X;
				vg.y = groupObj.Y;
				vg.height = groupObj.HEIGHT;
				vg.width = groupObj.WIDTH;
			}
			
			private function setgenericPopup(event:Event):void
			{
				
				// ****************** For Setting the Domain of DropBoxes ************************
				currentDropDown = ((Button)(event.currentTarget)).id;
				var typeStr : String = baseAsset.inspProperties == null || (baseAsset.inspProperties != null && baseAsset.inspProperties[currentDropDown] == null)? "Inventory" : "Inspection";
				var property : Object;
				var list : ArrayCollection = new ArrayCollection();
				if(typeStr === "Inventory")
				{
					property = baseAsset.invProperties[currentDropDown];

					for(var di : int = 0; di < property.d_type.length; di++)
					{
						list.addItem(property.d_type.getItemAt(di));
					}
				}
				
				else if(typeStr ==="Inspection")
				{
					property = baseAsset.inspProperties[currentDropDown];
					
					for(var di : int = 0; di < property.d_type.length; di++)
					{
						list.addItem(property.d_type.getItemAt(di));
					}
				}

				genericPopup.open(this,false);
				PopUpManager.centerPopUp(genericPopup);
				popupList.dataProvider = list;
			}
			
			//Instantiates and sets the properties of the tab buttons
			private function setButton(buttons:Vector.<Button>, button: Button, str: String, group:Group): void
			{
				button = new Button();
				button.addEventListener(MouseEvent.CLICK, 
					function(e:MouseEvent):void
					{
						group.setVisible(true);
						button.enabled = false;
						
						for(var bi : int = 0; bi < buttons.length; bi++)
						{
							if(buttons[bi] != button)
							{
								buttons[bi].enabled = true;
								panels.getItemAt(bi).setVisible(false);
							}
						}
					});
				button.content = str;
				
				buttons.push(button);
			}
			
			private function setImages():void
			{
				images = new Vector.<Image>();
				
				var memoImg : Image = new Image();
				var voiceImg : Image = new Image();
				var videoImg : Image = new Image();
				var captureImg : Image = new Image();
				
				memoImg.source = memo;
				voiceImg.source = voice;
				videoImg.source = video;
				captureImg.source = camera;
				
				memoImg.buttonMode = true;
				voiceImg.buttonMode = true;
				videoImg.buttonMode = true;
				captureImg.buttonMode = true;
				
				memoImg.width = 40;
				voiceImg.width = 40;
				videoImg.width = 40;
				captureImg.width = 40;
				
				memoImg.height = 40;
				voiceImg.height = 40;
				videoImg.height = 40;
				captureImg.height = 40;
				
				memoImg.accessibilityEnabled = true;
				voiceImg.accessibilityEnabled = true;
				video.accessibilityEnabled = true;
				captureImg.accessibilityEnabled = true;
				
				// Double check this
				memoImg.accessibilityDescription = "Inventory";
				voiceImg.accessibilityDescription = "Inventory";
				videoImg.accessibilityDescription = "Inventory";
				captureImg.accessibilityDescription = "Inventory";
				
				memoImg.addEventListener(MouseEvent.CLICK, memoCapture);
				voiceImg.addEventListener(MouseEvent.CLICK, voiceCapture);
				videoImg.addEventListener(MouseEvent.CLICK, videoCapture);
				captureImg.addEventListener(MouseEvent.CLICK, imageCapture);
				
				images.push(memoImg);
				images.push(voiceImg);
				images.push(videoImg);
				images.push(captureImg);
				
			}
			
			
			protected function imageCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:CameraEvent = new CameraEvent(CameraEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function videoCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:videoEvent = new videoEvent(videoEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function voiceCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:VoiceEvent = new VoiceEvent(VoiceEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function memoCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:TextMemoEvent = new TextMemoEvent(TextMemoEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			
			// Method to handle the close event
			private function handleCloseEvent():void 
			{
				PopUpManager.removePopUp(this);
				
			}
			
			// Method to handle saving an asset
			private function onSave():void
			{
				
				var obj : Object;
				var validator : Object;
				var vResult:ValidationResultEvent;
				
				//For all inventory components
				for (var ci : int = 0; ci < invComponents.length; ci++)
				{
					obj = baseAsset.invProperties[invComponents.getItemAt(ci).id];
					if(obj.type === "INTEGER")
					{
						validator = new NumberValidator;
						validator.listener = invComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.invProperties[invComponents.getItemAt(ci).id].value = invComponents.getItemAt(ci).text;
							invComponents.getItemAt(ci).errorString = '';
						}else
						{
							invComponents.getItemAt(ci).text = baseAsset.invProperties[invComponents.getItemAt(ci).id].value;
						}
					}
					else if(obj.type === "TEXT")
					{
						validator = new Validator;
						validator.listener = invComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.invProperties[invComponents.getItemAt(ci).id].value = invComponents.getItemAt(ci).text;	
							invComponents.getItemAt(ci).errorString = '';
						}else
						{
							invComponents.getItemAt(ci).text = baseAsset.invProperties[invComponents.getItemAt(ci).id].value;
						}
					}
					
				}
				
				// For all inspection components
				for (var ci : int = 0; ci < inspComponents.length; ci++)
				{
					obj = baseAsset.inspProperties[inspComponents.getItemAt(ci).id];
					if(obj.type === "INTEGER")
					{
						validator = new NumberValidator;
						validator.listener = inspComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value = inspComponents.getItemAt(ci).text;
							inspComponents.getItemAt(ci).errorString = '';
						}else
						{
							inspComponents.getItemAt(ci).text = baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value;
						}
					}
					else if(obj.type === "TEXT")
					{
						validator = new Validator;
						validator.listener = inspComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value = inspComponents.getItemAt(ci).text;	
							inspComponents.getItemAt(ci).errorString = '';
						}else
						{
							inspComponents.getItemAt(ci).text = baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value;
						}
					}
					
				}
				
				trace(baseAsset.toString());
				//dispatchEvent(new SaveEvent());
			}
			
			//Enable geotag capture on a specified tab
			private function enableGeoTags(tabID:String):void
			{
				if(tabID === "False")
				{
					return;
				}
				setImages();
				bigGroup.width = viewStack.width - images[0].width * 2;
				var imgGroup : VGroup = new VGroup();
				imgGroup.verticalAlign = "middle";
				for(var imi : int = 0; imi < images.length; imi++)
				{
					imgGroup.addElement(images[imi]);
				}
				viewStackGroup.addElement(imgGroup);
			}
			
			// Retrieve the domain list for the specifiec column/dropdown 
			private function getDomainForControl(columnName:String):ArrayCollection
			{
				
				return new ArrayCollection();
			}
			
			
			protected function retireChk_changeHandler(event:Event):void
			{
				for (var forIndex:int = 0; forIndex < viewStack.numChildren; forIndex++)
				{
					var curr:DisplayObject = viewStack.getChildAt(forIndex);
					if (curr is UIComponent)
					{
						var curr2:UIComponent = curr as UIComponent;
						curr2.enabled = !btnRetire.selected;
					}
				}
			}
			// *******************************  Utility Methods *******************************
			
			// Retrieve the ID for a dropdown datasource for the given description
			private function findID(objArrayC:ArrayCollection, desc:String):String
			{
				for each (var item:Object in objArrayC)
				{
					if (item.DESCRIPTION == desc)
						return String(item.ID);
				}
				return '';
			}
			
			// Retrieve the description for a dropdown datasource for the given id
			private function findValue(objArrayC:ArrayCollection, id:String):String
			{
				for each (var item:Object in objArrayC)
				{
					if (item.ID == id)
						return item.DESCRIPTION;
				}
				return "";
			}
			
			// Close the dropdown popup
			private function closePopup():void
			{
				genericPopup.close(true, popupList.selectedItem);
				var itemText:String = popupList.selectedItem;
				var txtInp : TextInput;
				for(var i : int = 0; i < dropDowns.length; i++)
				{
					if(dropDowns.getItemAt(i).id == currentDropDown)
					{
						txtInp = (TextInput)(dropDowns.getItemAt(i));
					}
				}
				txtInp.text = itemText;
			}
			
			protected function skinnablePopUp_closeHandler(event:PopUpEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:SkinnablePopUpContainer id="genericPopup" width="300" height="400" name="Material"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin" >
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
				<s:List id="popupList" change="closePopup()" width="100%" height="100%" labelField="DESCRIPTION" fontSize="18" allowMultipleSelection="false"/>
				
				</s:VGroup>
				
				
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>
	<s:HGroup id="tabButtonGroup">-->  <!-- Placeholder for tab buttons-->
		
	<!--</s:HGroup>-->
	
	<!--<views:CBViewStack id="viewStack" width="100%" height="100%" skinClass="skins.CBScrollableSkin">
		
	</views:CBViewStack>
	
	<s:HGroup horizontalAlign="center" width="100%">
		<s:Button label="Save" id="btnSave" click="onSave();"/>
		<s:Button label="Close" id="btnClose" click="handleCloseEvent();"/>
		<s:CheckBox label="Move to Current Location" id="btnMove"/>
		<s:CheckBox label="Retire" id="btnRetire" />
	</s:HGroup>-->
	
	
	<fx:Script>
		<![CDATA[
			import com.adobe.audio.format.WAVWriter;
			import com.adobe.serialization.json.JSONParseError;
			import com.asfusion.mate.events.Dispatcher;
			import com.transcendss.mavric.db.MAVRICDBManager;
			import com.transcendss.mavric.events.SaveEvent;
			import com.transcendss.mavric.managers.AssetManager;
			import com.transcendss.mavric.util.FileUtility;
			import com.transcendss.mavric.util.TSSALoader;
			import com.transcendss.transcore.events.CameraEvent;
			import com.transcendss.transcore.events.InventoryMenuEvent;
			import com.transcendss.transcore.events.MenuBarEvent;
			import com.transcendss.transcore.events.RouteSelectorEvent;
			import com.transcendss.transcore.events.TextMemoEvent;
			import com.transcendss.transcore.events.VoiceEvent;
			import com.transcendss.transcore.events.videoEvent;
			import com.transcendss.transcore.sld.models.components.BaseAsset;
			import com.transcendss.transcore.sld.models.components.Element;
			import com.transcendss.transcore.sld.models.components.GeoTag;
			import com.transcendss.transcore.sld.models.components.Materials;
			import com.transcendss.transcore.sld.models.components.Route;
			import com.transcendss.transcore.sld.models.managers.GeotagsManager;
			import com.transcendss.transcore.util.Converter;
			import com.transcendss.transcore.util.TSSAudio;
			import com.transcendss.transcore.util.TSSLoader;
			import com.transcendss.transcore.util.TSSMemo;
			import com.transcendss.transcore.util.TSSPicture;
			import com.transcendss.transcore.util.TSSVideo;
			
			import flash.events.*;
			import flash.events.Event;
			import flash.events.EventDispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.*;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			import org.alivepdf.pages.Page;
			
			import spark.components.ComboBox;
			import spark.components.Group;
			import spark.components.Image;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.supportClasses.Skin;
			import spark.core.SpriteVisualElement;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.PopUpEvent;
			import spark.skins.spark.PanelSkin;
			import spark.validators.NumberValidator;
			
			//Possible error: missing semicolons
//			[Bindable]
//			[Embed(source="images/sld/camera-icon.png")] protected var camera:Class
//			[Embed(source="images/sld/web-camera-icon.png")] protected var video:Class
//			[Embed(source="images/sld/microphone-icon.png")] protected var voice:Class
//			[Embed(source="images/sld/note-icon.png")] protected var memo:Class
			
			private var dbManager:MAVRICDBManager;
			private var baseAsset:BaseAsset;
			private var panels: ArrayList;
			private var images: Vector.<Image>;
			private var bigGroup : Group = new Group(); 
			private var viewStackGroup: HGroup = new HGroup();
			private var invComponents : ArrayList = new ArrayList();
			private var inspComponents : ArrayList = new ArrayList();
			private var currentDropDown : String;
			private var dropDowns : ArrayList = new ArrayList();
			
			
			// Method to handle initialization of the asset edit form
			protected function init():void
			{
				dbManager = new MAVRICDBManager();
			}
			
			public function setBaseAsset(asset:BaseAsset):void
			{
				baseAsset = asset;
				
				// Build the form (complete with asset values in fields) here
				try
				{
					dbManager = new MAVRICDBManager();
					var str: String;
					
					var httpService:HTTPService = new HTTPService();
					
					httpService.url = "InnerFiles/JSON_sync/Data_Entry_Template_testcase.json";
					
					httpService.resultFormat = "text";
					
					//httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
					httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
					
					httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
					
					httpService.send();
					
					function onFaultHttpService(e:FaultEvent):void
					{
						//Alert.show("Unable to load Files/file.json.");
						trace("Error!");
					}
					
					
					function onResultHttpService(e:ResultEvent):void
					{
						str = e.result as String;
						try
						{
							trace(str);
							parseConfig(str);
							
						}catch(jserr: JSONParseError)
						{
							FlexGlobals.topLevelApplication.TSSAlert(jserr.getStackTrace());
						}
						
					}
					
				} catch (err:Error)
				{
					FlexGlobals.topLevelApplication.TSSAlert(err.getStackTrace());
				}
			}
			
			private function parseConfig(s: String): void
			{
				var configObj : Object = JSON.parse(s);
				var top : Group = new Group();
				var tabs : Array = configObj.DATA_ENTRY_TEMPLATE.TABS;
				panels = new ArrayList();
				
				// Title Label for the form
				
				var editLabel : Label = new Label();
				editLabel.text = configObj.DATA_ENTRY_TEMPLATE.TITLE;
				editLabel.y += 100;
				tabButtonGroup.addElement(editLabel);
				var sprite:SpriteVisualElement = new SpriteVisualElement();
				sprite.addChild(baseAsset.symbol);
				tabButtonGroup.addElement(sprite);
				
				
				var buttons : Vector.<Button> = new Vector.<Button>();
				var button : Button;
				var groups : Array;
				var group : Group;
				
				//For every Group within the viewStack
				for(var ti : int = 0; ti < tabs.length; ti++)
				{
					// the var groups does NOT represent the array of panels
					groups = tabs[ti].GROUPS as Array;
					group = new Group();
					
					// refers to Inventory
					group.id = tabs[ti].TYPE;
					
					//Take care of the buttons
					setButton(buttons, button, tabs[ti].ID, group);
					if(ti == 0)
					{
						buttons[0].enabled = false;
					}
					
					var vg: VGroup;
					//For every VGroup within a Group
					for(var i : int = 0; i < groups.length; i++)
					{
						var groupObj : Object = groups[i];
						
						// Defining each VGroup
						vg = new VGroup();
						
						var hg: HGroup; 
						var controls : Array = groupObj.CONTROLS as Array; 
						
						//For every control (HGroup) within a VGroup
						for(var j : int = 0; j < controls.length; j++)
						{
							hg = new HGroup();
							var label : Label = new Label();
							label.text = controls[j].Label;
							
							hg.addElement(label);
							//This series of conditionals determines what type of input component to create
							if(controls[j].TYPE == "TextInput")
							{
								var txtInp : TextInput = new TextInput();
								txtInp.id = controls[j].ID;
								
								hg.addElement(txtInp);
								
								if(tabs[ti].TYPE === "Inventory")
								{
									invComponents.addItem(txtInp);
									txtInp.text = baseAsset.invProperties[txtInp.id].value;
									
								}
								else if(tabs[ti].TYPE === "Inspection")
								{
									inspComponents.addItem(txtInp);
									txtInp.text = baseAsset.inspProperties[txtInp.id].value;
								}
							}
							else if(controls[j].TYPE == "DropDownButton")
							{
								
								txtInp  = new TextInput();
								var btn : Button = new Button();
								btn.content = "Select";
								btn.id = controls[j].ID;
								txtInp.id = controls[j].ID;
								
								txtInp.editable = false;
								
								btn.addEventListener(MouseEvent.CLICK, setgenericPopup);
								hg.addElement(txtInp);
								hg.addElement(btn);
								dropDowns.addItem(txtInp);
								
								if(tabs[ti].TYPE === "Inventory")
								{
									invComponents.addItem(txtInp);
									txtInp.text = baseAsset.invProperties[txtInp.id].value;
								}
								else if(tabs[ti].TYPE === "Inspection")
								{
									inspComponents.addItem(txtInp);
									txtInp.text = baseAsset.inspProperties[txtInp.id].value;
								}
								
							}
							
							//Set properties and add elements of the VGroup
							setVGroup(vg, hg, groupObj);
							
						}
						
						group.addElement(vg);
					}
					
					bigGroup.addElement(group);
					
					panels.addItem(group);
					if(ti != 0)
					{
						group.setVisible(false);	
					}
				}
				for(var bi: int = 0; bi < buttons.length; bi++)
				{
					tabButtonGroup.addElement((Button)(buttons[bi]));
				}
				viewStackGroup.addElement(bigGroup);
				enableGeoTags(configObj.ENABLEGEOTAGS);
				viewStack.addElement(viewStackGroup);
				btnRetire.addEventListener(MouseEvent.CLICK, retireChk_changeHandler);
				
			}
			
			private function setVGroup(vg : VGroup, hg:HGroup, groupObj:Object):void
			{
				
				if(vg.numChildren == 0)
				{
					var space : Label = new Label();
					var vgtitle : Label = new Label();
					vgtitle.text = groupObj.TITLE;
					vg.addElement(vgtitle);
					vg.addElement(space);
				}
				
				vg.addElement(hg);
				vg.x = groupObj.X;
				vg.y = groupObj.Y;
				vg.height = groupObj.HEIGHT;
				vg.width = groupObj.WIDTH;
			}
			
			private function setgenericPopup(event:Event):void
			{
				
				// ****************** For Setting the Domain of DropBoxes ************************
				currentDropDown = ((Button)(event.currentTarget)).id;
				var typeStr : String = baseAsset.inspProperties == null || (baseAsset.inspProperties != null && baseAsset.inspProperties[currentDropDown] == null)? "Inventory" : "Inspection";
				var property : Object;
				var list : ArrayCollection = new ArrayCollection();
				if(typeStr === "Inventory")
				{
					property = baseAsset.invProperties[currentDropDown];
					
					for(var di : int = 0; di < property.d_type.length; di++)
					{
						list.addItem(property.d_type.getItemAt(di));
					}
				}
					
				else if(typeStr ==="Inspection")
				{
					property = baseAsset.inspProperties[currentDropDown];
					
					for(di = 0; di < property.d_type.length; di++)
					{
						list.addItem(property.d_type.getItemAt(di));
					}
				}
				
				genericPopup.open(this,false);
				PopUpManager.centerPopUp(genericPopup);
				popupList.dataProvider = list;
			}
			
			//Instantiates and sets the properties of the tab buttons
			private function setButton(buttons:Vector.<Button>, button: Button, str: String, group:Group): void
			{
				button = new Button();
				button.addEventListener(MouseEvent.CLICK, 
					function(e:MouseEvent):void
					{
						group.setVisible(true);
						button.enabled = false;
						
						for(var bi : int = 0; bi < buttons.length; bi++)
						{
							if(buttons[bi] != button)
							{
								buttons[bi].enabled = true;
								panels.getItemAt(bi).setVisible(false);
							}
						}
					});
				button.content = str;
				
				buttons.push(button);
			}
			
			private function setImages():void
			{
				images = new Vector.<Image>();
				
				var memoImg : Image = new Image();
				var voiceImg : Image = new Image();
				var videoImg : Image = new Image();
				var captureImg : Image = new Image();
				var gtManager:GeotagsManager = new GeotagsManager();
				memoImg.source = gtManager.memo;
				voiceImg.source = gtManager.voice;
				videoImg.source = gtManager.video;
				captureImg.source = gtManager.camera;
				
				memoImg.buttonMode = true;
				voiceImg.buttonMode = true;
				videoImg.buttonMode = true;
				captureImg.buttonMode = true;
				
				memoImg.width = 40;
				voiceImg.width = 40;
				videoImg.width = 40;
				captureImg.width = 40;
				
				memoImg.height = 40;
				voiceImg.height = 40;
				videoImg.height = 40;
				captureImg.height = 40;
				
				memoImg.accessibilityEnabled = true;
				voiceImg.accessibilityEnabled = true;
				videoImg.accessibilityEnabled = true;
				captureImg.accessibilityEnabled = true;
				
				// Double check this
				memoImg.accessibilityDescription = "Inventory";
				voiceImg.accessibilityDescription = "Inventory";
				videoImg.accessibilityDescription = "Inventory";
				captureImg.accessibilityDescription = "Inventory";
				
				memoImg.addEventListener(MouseEvent.CLICK, memoCapture);
				voiceImg.addEventListener(MouseEvent.CLICK, voiceCapture);
				videoImg.addEventListener(MouseEvent.CLICK, videoCapture);
				captureImg.addEventListener(MouseEvent.CLICK, imageCapture);
				
				images.push(memoImg);
				images.push(voiceImg);
				images.push(videoImg);
				images.push(captureImg);
				
			}
			
			
			protected function imageCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:CameraEvent = new CameraEvent(CameraEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function videoCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:videoEvent = new videoEvent(videoEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function voiceCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:VoiceEvent = new VoiceEvent(VoiceEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			protected function memoCapture(event:Event):void
			{
				FlexGlobals.topLevelApplication.GlobalComponents.capturEventSource = ((Image)(event.currentTarget)).accessibilityDescription;
				
				var tmpEvent:TextMemoEvent = new TextMemoEvent(TextMemoEvent.OPENCONTROL, true, true);
				dispatchEvent(tmpEvent);
			}
			
			
			// Method to handle the close event
			private function handleCloseEvent():void 
			{
				PopUpManager.removePopUp(this);
				
			}
			
			// Method to handle saving an asset
			private function onSave():void
			{
				
				var obj : Object;
				var validator : Object;
				var vResult:ValidationResultEvent;
				var saveLabel : Label = new Label();
				saveLabel.text = "Saved Asset Values";
				
				//FlexGlobals.topLevelApplication.TSSAlert("Saving Data");
				
				
				//For all inventory components
				for (var ci : int = 0; ci < invComponents.length; ci++)
				{
					obj = baseAsset.invProperties[invComponents.getItemAt(ci).id];
					if(obj.type === "INTEGER" || obj.type === "REAL")
					{
						validator = new NumberValidator;
						validator.required = obj.Nullable === "True"?true:false;
						validator.listener = invComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.invProperties[invComponents.getItemAt(ci).id].value = invComponents.getItemAt(ci).text;
							invComponents.getItemAt(ci).errorString = '';
						}else
						{
							invComponents.getItemAt(ci).text = baseAsset.invProperties[invComponents.getItemAt(ci).id].value;
						}
					}
					else if(obj.type === "TEXT")
					{
						validator = new Validator;
						validator.required = obj.Nullable === "True"?true:false;
						validator.listener = invComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.invProperties[invComponents.getItemAt(ci).id].value = invComponents.getItemAt(ci).text;	
							invComponents.getItemAt(ci).errorString = '';
						}else
						{
							invComponents.getItemAt(ci).text = baseAsset.invProperties[invComponents.getItemAt(ci).id].value;
						}
					}
					
				}
				
				// For all inspection components
				for (ci = 0; ci < inspComponents.length; ci++)
				{
					obj = baseAsset.inspProperties[inspComponents.getItemAt(ci).id];
					if(obj.type === "INTEGER")
					{
						validator = new NumberValidator;
						validator.listener = inspComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value = inspComponents.getItemAt(ci).text;
							inspComponents.getItemAt(ci).errorString = '';
						}else
						{
							inspComponents.getItemAt(ci).text = baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value;
						}
					}
					else if(obj.type === "TEXT")
					{
						validator = new Validator;
						validator.listener = inspComponents.getItemAt(ci);
						vResult = validator.validate(validator.listener.text);
						if (vResult.type==ValidationResultEvent.VALID)
						{
							baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value = inspComponents.getItemAt(ci).text;	
							inspComponents.getItemAt(ci).errorString = '';
						}else
						{
							inspComponents.getItemAt(ci).text = baseAsset.inspProperties[inspComponents.getItemAt(ci).id].value;
						}
					}
					
				}
				var se : SaveEvent = new SaveEvent(SaveEvent.ON_SAVE); // Is the parameter correct?
				se.baseAsset = baseAsset;
				trace(baseAsset.toString());
				dispatchEvent(se);
			}
			
			//Enable geotag capture on a specified tab
			private function enableGeoTags(tabID:String):void
			{
				if(tabID === "False")
				{
					return;
				}
				setImages();
				
				bigGroup.width = viewStack.width - images[0].width * 2;
				var imgGroup : VGroup = new VGroup();
				imgGroup.verticalAlign = "middle";
				for(var imi : int = 0; imi < images.length; imi++)
				{
					imgGroup.addElement(images[imi]);
				}
				viewStackGroup.addElement(imgGroup);
			}
			
			// Retrieve the domain list for the specifiec column/dropdown 
			private function getDomainForControl(columnName:String):ArrayCollection
			{
				
				return new ArrayCollection();
			}
			
			
			protected function retireChk_changeHandler(event:Event):void
			{
				for (var forIndex:int = 0; forIndex < viewStack.numChildren; forIndex++)
				{
					var curr:DisplayObject = viewStack.getChildAt(forIndex);
					if (curr is UIComponent)
					{
						var curr2:UIComponent = curr as UIComponent;
						curr2.enabled = !btnRetire.selected;
					}
				}
			}
			// *******************************  Utility Methods *******************************
			
			// Retrieve the ID for a dropdown datasource for the given description
			private function findID(objArrayC:ArrayCollection, desc:String):String
			{
				for each (var item:Object in objArrayC)
				{
					if (item.DESCRIPTION == desc)
						return String(item.ID);
				}
				return '';
			}
			
			// Retrieve the description for a dropdown datasource for the given id
			private function findValue(objArrayC:ArrayCollection, id:String):String
			{
				for each (var item:Object in objArrayC)
				{
					if (item.ID == id)
						return item.DESCRIPTION;
				}
				return "";
			}
			
			// Close the dropdown popup
			private function closePopup():void
			{
				genericPopup.close(true, popupList.selectedItem);
				var itemText:String = popupList.selectedItem;
				var txtInp : TextInput;
				for(var i : int = 0; i < dropDowns.length; i++)
				{
					if(dropDowns.getItemAt(i).id == currentDropDown)
					{
						txtInp = (TextInput)(dropDowns.getItemAt(i));
					}
				}
				txtInp.text = itemText;
			}
			
			protected function skinnablePopUp_closeHandler(event:PopUpEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		
		
		<s:SkinnablePopUpContainer id="genericPopup" width="300" height="400" name="Material"  skinClass="skins.TSSSkinnablePopUpContainerSkin" >
			<s:Panel width="100%" height="100%" skinClass="skins.HeaderlessPanelSkin" >
				<s:VGroup width="100%" height="100%" horizontalAlign="center">
					<s:List id="popupList" change="closePopup()" width="100%" height="100%" labelField="DESCRIPTION" fontSize="18" allowMultipleSelection="false"/>
					
				</s:VGroup>
			</s:Panel>
		</s:SkinnablePopUpContainer>
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>
	<s:HGroup id="tabButtonGroup">  <!-- Placeholder for tab buttons-->
		
	</s:HGroup>
	
	<views:CBViewStack id="viewStack" width="100%" height="100%" skinClass="skins.CBScrollableSkin">
		
	</views:CBViewStack>
	
	
	<s:HGroup horizontalAlign="center" width="100%">
		<s:Button label="Save" id="btnSave" click="onSave();"/>
		<s:Button label="Close" id="btnClose" click="handleCloseEvent();"/>
		<s:CheckBox label="Move to Current Location" id="btnMove"/>
		<s:CheckBox label="Retire" id="btnRetire" />
	</s:HGroup>
	
	
</s:TitleWindow>