<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.
    
    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnablePopUpContainer container.  

    @see spark.components.SkinnablePopUpContainer
    
    @langversion 3.0
    @playerversion Flash 10
    @playerversion AIR 2.5
    @productversion Flex 4.5
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">
    
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.SkinnablePopUpContainer")]
    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import spark.components.SkinnablePopUpContainer;
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    background.visible = false;
                }
                else
                {
                    background.visible = true;
                    bgFill.color = getStyle("backgroundColor");
                    bgFill.alpha = getStyle("backgroundAlpha");
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled"/>
        <s:State name="closed" stateGroups="closedGroup"/>
        <s:State name="disabledAndClosed" stateGroups="closedGroup"/>
    </s:states>
    
    <!-- Transitions for open and close -->
    <s:transitions>
        <s:Transition fromState="closed" toState="normal" autoReverse="true">
            <s:Fade duration="150" target="{chrome}"/>
        </s:Transition>

        <s:Transition fromState="disabledAndClosed" toState="disabled" autoReverse="true">
            <s:Fade duration="150" target="{chrome}"/>
        </s:Transition>
        
        <s:Transition fromState="normal" toState="closed" autoReverse="true">
            <s:Fade duration="150" target="{chrome}"/>
        </s:Transition>

        <s:Transition fromState="disabled" toState="disabledAndClosed" autoReverse="true">
            <s:Fade duration="150" target="{chrome}"/>
        </s:Transition>
    </s:transitions>
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" >
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="1" color="0x000000" />
		</s:stroke>
	</s:Rect>
    <!--- Defines the background and content group used by this skin. -->
    <s:Group id="chrome" left="1" right="1" top="1" bottom="1" visible.closedGroup="false">
		<s:Group left="0" right="0" top="0" height="32">
			<!-- layer 0: title bar fill -->
			<!--- @private -->
			<s:Rect id="tbFill" left="0" right="0" top="0" bottom="1">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0xE2E2E2" />
						<s:GradientEntry color="0xD9D9D9" />
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			
			<!-- layer 1: title bar highlight -->
			<!--- @private -->
			<s:Rect id="tbHilite" left="0" right="0" top="0" bottom="0">
				<s:stroke>
					<s:LinearGradientStroke rotation="90" weight="1">
						<s:GradientEntry color="0xEAEAEA" />
						<s:GradientEntry color="0xD9D9D9" />
					</s:LinearGradientStroke>
				</s:stroke>
			</s:Rect>
			
			<!-- layer 2: title bar divider -->
			<!--- @private -->
			<s:Rect id="tbDiv" left="0" right="0" height="1" bottom="0">
				<s:fill>
					<s:SolidColor color="0xC0C0C0" />
				</s:fill>
			</s:Rect>
			
			<!-- layer 3: text -->
			<!--- @copy spark.components.Panel#titleDisplay -->
			<s:Label id="titleDisplay" maxDisplayedLines="1"
					 left="9" right="3" top="1" bottom="0" minHeight="30"
					 verticalAlign="middle" textAlign="start" fontWeight="bold" text="{this.hostComponent.name}">
			</s:Label>
			<s:Button id="closeButton"  icon="@Embed('/images/util/popupexit.png')"  
					  height="32" width="32" right="0" skinClass="skins.CloseButtonSkin" click="(this.hostComponent as SkinnablePopUpContainer).close();" />
		</s:Group>
        <!--- Defines the appearance of the SkinnablePopUpContainer class's background. -->
        <s:Rect id="background" left="0" right="0" top="32" bottom="0">
            <s:fill>
                <!--- @private -->
                <s:SolidColor id="bgFill" color="#FFFFFF"/>
            </s:fill>
        </s:Rect>
        
        <!--
        Note: Setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
        -->
        <!--- @copy spark.components.SkinnableContainer#contentGroup -->
        <s:Group id="contentGroup" left="0" right="0" top="32" bottom="0" minWidth="0" minHeight="0">
            <s:layout>
                <s:BasicLayout/>
            </s:layout>
        </s:Group>
    </s:Group>
    
</s:Skin>
